{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import Tensor\n",
    "from torch import nn \n",
    "from torch.autograd import Variable\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "from utility import *\n",
    "\n",
    "np.random.seed(seed=7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train input 100 Hz: 316x28x50\n",
      "Train target 100 Hz: 316\n",
      "Test input 100 Hz: 100x28x50\n",
      "Test target 100 Hz: 100\n",
      "\n",
      "Train input 1000 Hz: 316x28x500\n",
      "Train target 1000 Hz: 316\n",
      "Test input 1000 Hz: 100x28x500\n",
      "Test target 1000 Hz: 100\n"
     ]
    }
   ],
   "source": [
    "import dlc_bci\n",
    "\n",
    "train_input_100 , train_target_100 = dlc_bci.load(root = './data_bci_100Hz', download = False)\n",
    "test_input_100 , test_target_100 = dlc_bci.load(root = './data_bci_100Hz', download = False, train = False)\n",
    "\n",
    "train_input_1000 , train_target_1000 = dlc_bci.load(root = './data_bci_1000Hz', download = False, one_khz = True)\n",
    "test_input_1000 , test_target_1000 = dlc_bci.load(root = './data_bci_1000Hz', download = False, train = False, one_khz = True)\n",
    "\n",
    "print(\"Train input 100 Hz: {:d}x{:d}x{:d}\".format(*(s for s in train_input_100.size())))\n",
    "print(\"Train target 100 Hz: {:d}\".format(*(s for s in train_target_100.size())))\n",
    "print(\"Test input 100 Hz: {:d}x{:d}x{:d}\".format(*(s for s in test_input_100.size())))\n",
    "print(\"Test target 100 Hz: {:d}\".format(*(s for s in test_target_100.size())))\n",
    "print(\"\")\n",
    "print(\"Train input 1000 Hz: {:d}x{:d}x{:d}\".format(*(s for s in train_input_1000.size())))\n",
    "print(\"Train target 1000 Hz: {:d}\".format(*(s for s in train_target_1000.size())))\n",
    "print(\"Test input 1000 Hz: {:d}x{:d}x{:d}\".format(*(s for s in test_input_1000.size())))\n",
    "print(\"Test target 1000 Hz: {:d}\".format(*(s for s in test_target_1000.size())))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Network definition"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This conv2d network is more inspired from a classic conv2d net that is used for image recognition "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from models import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_nb_errors(model, data_input, data_target, batch_size):\n",
    "    nb_errors = 0\n",
    "    Ndata = len(data_input[:, 0, 0, 0])\n",
    "    model.eval()\n",
    "    print('data_target', data_target.shape)\n",
    "    print('data_input', data_input.shape)\n",
    "    \n",
    "    for b_start in range(0, Ndata, batch_size):\n",
    "        bsize_eff = batch_size - max(0, b_start+batch_size-Ndata)  # boundary case\n",
    "        batch_output = model.forward(data_input.narrow(0, b_start, bsize_eff))  # is Variable if data_input is Variable\n",
    "        if len(list(batch_output.size()))>1 and batch_output.size(1) > 1:\n",
    "            # as many ouputs as there are classes => select maximum output\n",
    "            nb_err_batch = (batch_output.max(1)[1] != data_target.narrow(0, b_start, bsize_eff)).long().sum()\n",
    "            # overflow problem if conversion to Long Int not performed, treated as short 1-byte int otherwise!!\n",
    "        else:\n",
    "            # output is a scalar in [0, 1]\n",
    "            nb_err_batch = batch_output.round().sub(data_target.narrow(0, b_start, bsize_eff)).sign().abs().sum()\n",
    "        \n",
    "        nb_errors += nb_err_batch\n",
    "    if isinstance(nb_errors, Variable):\n",
    "        nb_errors = nb_errors.data[0]\n",
    "    return nb_errors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing and Data Augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train (3000, 28, 50)\n",
      "test (1000, 28, 50)\n",
      "validation (160, 28, 50)\n",
      "Ntrain =  3000\n",
      "Ntest =  1000\n",
      "Nvalidation =  160\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "preprocessed_input_train, preprocessed_input_validation, preprocessed_input_train_target, preprocessed_input_validation_target, kept_channels_idx = preprocessing_train(train_input_1000, train_target_1000, subsampling_frequency='100Hz', window=False,denoize=False, addGaussianNoise=False, reduceChannels=False, cutEnd = False)\n",
    "preprocessed_input_test, preprocessed_input_test_target  = preprocessing_test(test_input_1000, test_target_1000, kept_channels_idx, subsampling_frequency='100Hz', window=False,denoize = False, reduceChannels=False, cutEnd=False)\n",
    "\n",
    "#Remove Noise\n",
    "#preprocessed_input_train = denoisedSignals(preprocessed_input_train)\n",
    "#preprocessed_input_validation = denoisedSignals(preprocessed_input_validation)\n",
    "#preprocessed_input_test = denoisedSignals(preprocessed_input_test)\n",
    "#add random noise\n",
    "#preprocessed_input_train = whiteNoise(preprocessed_input_train)\n",
    "#preprocessed_input_validation = whiteNoise(preprocessed_input_validation)\n",
    "#preprocessed_input_test = whiteNoise(preprocessed_input_test)\n",
    "\n",
    "print('train', preprocessed_input_train.shape)\n",
    "print('test', preprocessed_input_test.shape)\n",
    "print('validation', preprocessed_input_validation.shape)\n",
    "\n",
    "labels_train = torch.from_numpy(preprocessed_input_train_target)\n",
    "labels_test = torch.from_numpy(preprocessed_input_test_target)\n",
    "labels_validation = torch.from_numpy(preprocessed_input_validation_target)\n",
    "\n",
    "preprocessed_input_train = torch.from_numpy(preprocessed_input_train).float()\n",
    "preprocessed_input_test = torch.from_numpy(preprocessed_input_test).float()\n",
    "preprocessed_input_validation = torch.from_numpy(preprocessed_input_validation).float()\n",
    "\n",
    "Ntrain = len(preprocessed_input_train[:,0,0])\n",
    "Ntest = len(preprocessed_input_test[:,0,0])\n",
    "Nvalidation = len(preprocessed_input_validation[:,0,0])\n",
    "\n",
    "Nchannels = len(preprocessed_input_train[0,:,0])\n",
    "Nsamples_100 = preprocessed_input_train.size(-1)\n",
    "\n",
    "print('Ntrain = ', Ntrain)\n",
    "print('Ntest = ', Ntest)\n",
    "print('Nvalidation = ', Nvalidation)\n",
    "\n",
    "train_input = Variable(preprocessed_input_train.view(Ntrain, 1, Nchannels, Nsamples_100))\n",
    "validation_input = Variable(preprocessed_input_validation.view(Nvalidation, 1, Nchannels, Nsamples_100), requires_grad=False)\n",
    "test_input = Variable(preprocessed_input_test.contiguous().view(Ntest, 1, Nchannels, Nsamples_100), requires_grad=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Network training and testing\n",
    "Non-linearity: elu  \n",
    "\n",
    "\n",
    "|criterion | optimizer | lr  | momentum | batch size | Nepochs | Train acc. | Test acc.|\n",
    "|----------|-----------|-----|----------|------------|---------|------------|----------|\n",
    "| BCE  | Adam  |1e-1 | def. | 15 | 150 | 86.4 | 61.4 | \n",
    "| BCE  | Adam  |1e-1 | def. | 20 | 150 | 99.8 | 79.5 | \n",
    "| BCE  | SGD   | 1e-2 | 0.85 | 20 | 150 | 98.9  | 61.5 | \n",
    "| CE   | Adam  | 1e-2 | def. | 20 | 150 | 98.4  |  70.5 | \n",
    "| CE   | SGD   | 1e-2 | 0.85 | 20 | 150 | 99.1 | 75.1 |\n",
    "\n",
    "\n",
    "Non-linearity: ReLU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Repetition 14\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  72.36666666666666\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  56.4\n",
      "\t Epoch Loss  127.47372436523438\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  81.3\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  61.6\n",
      "\t Epoch Loss  95.41956329345703\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  91.3\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  66.3\n",
      "\t Epoch Loss  58.38764953613281\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  94.33333333333333\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  68.3\n",
      "\t Epoch Loss  31.13827133178711\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  96.83333333333333\n",
      "\t Validation accuracy  79.375\n",
      "\t Test accuracy  68.4\n",
      "\t Epoch Loss  15.343198776245117\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  97.06666666666666\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  68.8\n",
      "\t Epoch Loss  7.719368934631348\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  69.6\n",
      "\t Epoch Loss  3.824183940887451\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  83.75\n",
      "\t Test accuracy  69.1\n",
      "\t Epoch Loss  2.6980843544006348\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  95.96666666666667\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  66.0\n",
      "\t Epoch Loss  13.906200408935547\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  97.66666666666667\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  69.1\n",
      "\t Epoch Loss  4.964156627655029\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  98.2\n",
      "\t Validation accuracy  85.0\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  1.1106997728347778\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  83.125\n",
      "\t Test accuracy  69.4\n",
      "\t Epoch Loss  0.7109736204147339\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  83.125\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.5350987315177917\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  98.46666666666667\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.4247087240219116\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  98.43333333333334\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  0.34564533829689026\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  0.2844533324241638\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.23887227475643158\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.19974888861179352\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.17037759721279144\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  98.5\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  70.3\n",
      "\t Epoch Loss  0.1453016996383667\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  98.5\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  70.3\n",
      "\t Epoch Loss  0.1244097575545311\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  98.46666666666667\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.10828091204166412\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  98.46666666666667\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  69.7\n",
      "\t Epoch Loss  0.0929151400923729\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  98.5\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.08037713915109634\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  98.46666666666667\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  0.07001201063394547\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  98.43333333333334\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  0.0609331838786602\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  98.46666666666667\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.053521327674388885\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  98.43333333333334\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.04696635901927948\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  98.43333333333334\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.04222794622182846\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.0363646000623703\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.03184742480516434\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.02817920222878456\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.024821318686008453\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  70.3\n",
      "\t Epoch Loss  0.022000236436724663\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.4\n",
      "\t Epoch Loss  0.019559117034077644\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.01791459508240223\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.5\n",
      "\t Epoch Loss  0.015360463410615921\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.6\n",
      "\t Epoch Loss  0.013568421825766563\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.4\n",
      "\t Epoch Loss  0.011980622075498104\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.1\n",
      "\t Epoch Loss  0.010749458335340023\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.009513506665825844\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.3\n",
      "\t Epoch Loss  0.008376210927963257\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.00747203454375267\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.006639641709625721\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.3\n",
      "\t Epoch Loss  0.005912285763770342\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.3\n",
      "\t Epoch Loss  0.005224370397627354\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.004691260866820812\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.3\n",
      "\t Epoch Loss  0.004145273007452488\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.003731266362592578\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  70.1\n",
      "\t Epoch Loss  0.003406129078939557\n",
      "Repetition 15\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  69.63333333333334\n",
      "\t Validation accuracy  56.25\n",
      "\t Test accuracy  49.5\n",
      "\t Epoch Loss  130.28526306152344\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  79.16666666666667\n",
      "\t Validation accuracy  48.125\n",
      "\t Test accuracy  61.2\n",
      "\t Epoch Loss  108.6580810546875\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  88.73333333333333\n",
      "\t Validation accuracy  36.25\n",
      "\t Test accuracy  63.6\n",
      "\t Epoch Loss  76.77702331542969\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  92.56666666666666\n",
      "\t Validation accuracy  36.875\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  46.74311828613281\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  95.3\n",
      "\t Validation accuracy  51.875\n",
      "\t Test accuracy  65.9\n",
      "\t Epoch Loss  24.82516098022461\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  96.16666666666667\n",
      "\t Validation accuracy  58.125\n",
      "\t Test accuracy  67.0\n",
      "\t Epoch Loss  13.462946891784668\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  96.93333333333334\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  68.6\n",
      "\t Epoch Loss  6.72578239440918\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  97.63333333333334\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  68.3\n",
      "\t Epoch Loss  4.092398166656494\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  68.4\n",
      "\t Epoch Loss  2.495972156524658\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  68.3\n",
      "\t Epoch Loss  1.5773813724517822\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  68.6\n",
      "\t Epoch Loss  1.10918390750885\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  68.7\n",
      "\t Epoch Loss  0.8086545467376709\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  68.8\n",
      "\t Epoch Loss  0.6107888221740723\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  68.8\n",
      "\t Epoch Loss  0.47194910049438477\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  68.5\n",
      "\t Epoch Loss  0.3708018362522125\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  98.63333333333334\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  68.7\n",
      "\t Epoch Loss  0.2927127182483673\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  68.7\n",
      "\t Epoch Loss  0.23727287352085114\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  98.76666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  68.7\n",
      "\t Epoch Loss  0.19220148026943207\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  98.83333333333333\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  68.7\n",
      "\t Epoch Loss  0.1590946763753891\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  19\n",
      "\t Training accuracy:  98.83333333333333\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  68.6\n",
      "\t Epoch Loss  0.13264746963977814\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  98.86666666666666\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  68.8\n",
      "\t Epoch Loss  0.11159786581993103\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  98.83333333333333\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  69.0\n",
      "\t Epoch Loss  0.09404832124710083\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  98.93333333333334\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  69.1\n",
      "\t Epoch Loss  0.0799461379647255\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  98.93333333333334\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  69.0\n",
      "\t Epoch Loss  0.06786610931158066\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  98.96666666666667\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  69.0\n",
      "\t Epoch Loss  0.05794268846511841\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  99.03333333333333\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  69.0\n",
      "\t Epoch Loss  0.049679022282361984\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  99.06666666666666\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  69.1\n",
      "\t Epoch Loss  0.042766645550727844\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  99.13333333333334\n",
      "\t Validation accuracy  60.0\n",
      "\t Test accuracy  69.2\n",
      "\t Epoch Loss  0.0370117723941803\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  99.13333333333334\n",
      "\t Validation accuracy  60.0\n",
      "\t Test accuracy  69.2\n",
      "\t Epoch Loss  0.03218863531947136\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  99.16666666666667\n",
      "\t Validation accuracy  59.375\n",
      "\t Test accuracy  69.3\n",
      "\t Epoch Loss  0.027997607365250587\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  99.16666666666667\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.3\n",
      "\t Epoch Loss  0.024371866136789322\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  99.2\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.3\n",
      "\t Epoch Loss  0.021285079419612885\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  99.2\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.6\n",
      "\t Epoch Loss  0.018611684441566467\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  99.2\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.7\n",
      "\t Epoch Loss  0.016287513077259064\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  99.16666666666667\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.7\n",
      "\t Epoch Loss  0.014328344725072384\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  99.16666666666667\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.7\n",
      "\t Epoch Loss  0.01258466299623251\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  99.2\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.7\n",
      "\t Epoch Loss  0.011107790283858776\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.7\n",
      "\t Epoch Loss  0.009782847948372364\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.7\n",
      "\t Epoch Loss  0.008634896948933601\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  0.007621983997523785\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  0.0067265890538692474\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  0.005945881363004446\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  42\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  0.005250142887234688\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.0046536121517419815\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.00412170123308897\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  58.125\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.003654028056189418\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  57.5\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.0032444235403090715\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  56.875\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.0028729112818837166\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  56.875\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.0025506638921797276\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  56.875\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  0.0022671064361929893\n",
      "Repetition 16\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  71.26666666666667\n",
      "\t Validation accuracy  44.375\n",
      "\t Test accuracy  44.8\n",
      "\t Epoch Loss  128.63644409179688\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  85.63333333333334\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  54.1\n",
      "\t Epoch Loss  96.15403747558594\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  90.6\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  55.5\n",
      "\t Epoch Loss  51.171382904052734\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  95.73333333333333\n",
      "\t Validation accuracy  73.125\n",
      "\t Test accuracy  66.1\n",
      "\t Epoch Loss  24.913955688476562\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  96.76666666666667\n",
      "\t Validation accuracy  70.625\n",
      "\t Test accuracy  66.7\n",
      "\t Epoch Loss  12.078238487243652\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  97.1\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  63.1\n",
      "\t Epoch Loss  5.46847677230835\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  63.1\n",
      "\t Epoch Loss  2.627485990524292\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  97.5\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  63.5\n",
      "\t Epoch Loss  1.55021071434021\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  97.66666666666667\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  63.3\n",
      "\t Epoch Loss  1.0101635456085205\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  97.7\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  63.3\n",
      "\t Epoch Loss  0.7083224654197693\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  97.66666666666667\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  63.9\n",
      "\t Epoch Loss  0.5232810974121094\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  97.76666666666667\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  63.8\n",
      "\t Epoch Loss  0.39675241708755493\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  93.76666666666667\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  67.0\n",
      "\t Epoch Loss  29.926605224609375\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  97.03333333333333\n",
      "\t Validation accuracy  79.375\n",
      "\t Test accuracy  70.4\n",
      "\t Epoch Loss  5.571809768676758\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  97.46666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  70.9\n",
      "\t Epoch Loss  1.2599183320999146\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  97.63333333333334\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  70.6\n",
      "\t Epoch Loss  0.7726274132728577\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  97.7\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  70.1\n",
      "\t Epoch Loss  0.545503556728363\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  97.73333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.4109089970588684\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  97.76666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.3240962624549866\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  97.73333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.2634403705596924\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.21808534860610962\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  77.5\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.18155847489833832\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  77.5\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.15377606451511383\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  77.5\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.13066981732845306\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.11169659346342087\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  98.13333333333334\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.09624584764242172\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  98.13333333333334\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.08316710591316223\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  98.06666666666666\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.0721539556980133\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  98.16666666666667\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.0628681629896164\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  98.13333333333334\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  69.8\n",
      "\t Epoch Loss  0.05493011325597763\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  98.16666666666667\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  69.7\n",
      "\t Epoch Loss  0.048112206161022186\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  69.5\n",
      "\t Epoch Loss  0.04211994633078575\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  69.2\n",
      "\t Epoch Loss  0.037172168493270874\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  98.2\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  69.2\n",
      "\t Epoch Loss  0.03262944146990776\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  69.1\n",
      "\t Epoch Loss  0.028716208413243294\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  69.2\n",
      "\t Epoch Loss  0.025368064641952515\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  69.1\n",
      "\t Epoch Loss  0.022393472492694855\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  69.0\n",
      "\t Epoch Loss  0.019817600026726723\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.9\n",
      "\t Epoch Loss  0.01756533607840538\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  68.8\n",
      "\t Epoch Loss  0.015580047853291035\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.8\n",
      "\t Epoch Loss  0.013799166306853294\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.7\n",
      "\t Epoch Loss  0.012234075926244259\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.6\n",
      "\t Epoch Loss  0.010865937918424606\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.6\n",
      "\t Epoch Loss  0.00967207457870245\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.7\n",
      "\t Epoch Loss  0.00860564224421978\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.6\n",
      "\t Epoch Loss  0.007673398591578007\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.6\n",
      "\t Epoch Loss  0.006831621751189232\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.6\n",
      "\t Epoch Loss  0.006099462043493986\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.2\n",
      "\t Epoch Loss  0.005429236683994532\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  68.3\n",
      "\t Epoch Loss  0.004818852059543133\n",
      "Repetition 17\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  68.7\n",
      "\t Validation accuracy  51.875\n",
      "\t Test accuracy  47.7\n",
      "\t Epoch Loss  132.59127807617188\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  79.9\n",
      "\t Validation accuracy  41.25\n",
      "\t Test accuracy  57.9\n",
      "\t Epoch Loss  110.89114379882812\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  88.46666666666667\n",
      "\t Validation accuracy  60.0\n",
      "\t Test accuracy  61.5\n",
      "\t Epoch Loss  79.69581604003906\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  92.53333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  62.0\n",
      "\t Epoch Loss  47.13887405395508\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  96.73333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  63.6\n",
      "\t Epoch Loss  26.3596134185791\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  97.43333333333334\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  67.2\n",
      "\t Epoch Loss  14.97519588470459\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  69.4\n",
      "\t Epoch Loss  7.126493453979492\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  70.6\n",
      "\t Epoch Loss  4.349555015563965\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  70.3\n",
      "\t Epoch Loss  2.636125087738037\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  70.6\n",
      "\t Epoch Loss  1.805687427520752\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  97.8\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  1.274048089981079\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  71.1\n",
      "\t Epoch Loss  0.9303147196769714\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  70.8\n",
      "\t Epoch Loss  0.7004067897796631\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  70.8\n",
      "\t Epoch Loss  0.5380090475082397\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  0.42518365383148193\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.3396577835083008\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  70.8\n",
      "\t Epoch Loss  0.2740935981273651\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  97.8\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.2245398908853531\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  71.1\n",
      "\t Epoch Loss  0.18557535111904144\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  97.8\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.15425793826580048\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  70.5\n",
      "\t Epoch Loss  0.1294531226158142\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  70.6\n",
      "\t Epoch Loss  0.10938423871994019\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  70.8\n",
      "\t Epoch Loss  0.09281790256500244\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  70.8\n",
      "\t Epoch Loss  0.07918819040060043\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.06778077036142349\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  70.5\n",
      "\t Epoch Loss  0.05816950276494026\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.05012160539627075\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  70.9\n",
      "\t Epoch Loss  0.04317287355661392\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  70.8\n",
      "\t Epoch Loss  0.03752710670232773\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  71.1\n",
      "\t Epoch Loss  0.03274662047624588\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  70.9\n",
      "\t Epoch Loss  0.028504034504294395\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  0.02494988404214382\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  66.25\n",
      "\t Test accuracy  71.3\n",
      "\t Epoch Loss  0.02181299775838852\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  66.25\n",
      "\t Test accuracy  71.7\n",
      "\t Epoch Loss  0.01909053884446621\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  71.6\n",
      "\t Epoch Loss  0.016752446070313454\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  35\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  71.7\n",
      "\t Epoch Loss  0.014746875502169132\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  71.7\n",
      "\t Epoch Loss  0.012922119349241257\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  71.7\n",
      "\t Epoch Loss  0.011379910632967949\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  71.6\n",
      "\t Epoch Loss  0.00999679695814848\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  71.6\n",
      "\t Epoch Loss  0.008832591585814953\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  66.25\n",
      "\t Test accuracy  71.6\n",
      "\t Epoch Loss  0.0077807363122701645\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  98.06666666666666\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  71.5\n",
      "\t Epoch Loss  0.006870705168694258\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  98.06666666666666\n",
      "\t Validation accuracy  66.25\n",
      "\t Test accuracy  71.5\n",
      "\t Epoch Loss  0.006068904884159565\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  98.06666666666666\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  71.5\n",
      "\t Epoch Loss  0.005339744500815868\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  71.5\n",
      "\t Epoch Loss  0.004726665560156107\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  71.6\n",
      "\t Epoch Loss  0.004179014824330807\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  71.6\n",
      "\t Epoch Loss  0.0037114559672772884\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  71.7\n",
      "\t Epoch Loss  0.0032712745014578104\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  71.4\n",
      "\t Epoch Loss  0.002907318063080311\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  71.6\n",
      "\t Epoch Loss  0.002563225105404854\n",
      "Repetition 18\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  69.96666666666667\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  51.8\n",
      "\t Epoch Loss  127.01287841796875\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  81.2\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  57.4\n",
      "\t Epoch Loss  98.51570129394531\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  87.93333333333334\n",
      "\t Validation accuracy  45.625\n",
      "\t Test accuracy  61.4\n",
      "\t Epoch Loss  66.45650482177734\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  93.1\n",
      "\t Validation accuracy  49.375\n",
      "\t Test accuracy  61.3\n",
      "\t Epoch Loss  37.36948013305664\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  95.6\n",
      "\t Validation accuracy  49.375\n",
      "\t Test accuracy  62.1\n",
      "\t Epoch Loss  21.566980361938477\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  95.8\n",
      "\t Validation accuracy  48.75\n",
      "\t Test accuracy  60.1\n",
      "\t Epoch Loss  11.113962173461914\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  96.33333333333333\n",
      "\t Validation accuracy  51.25\n",
      "\t Test accuracy  63.4\n",
      "\t Epoch Loss  6.784716606140137\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  96.63333333333334\n",
      "\t Validation accuracy  47.5\n",
      "\t Test accuracy  62.2\n",
      "\t Epoch Loss  5.687654972076416\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  96.23333333333333\n",
      "\t Validation accuracy  45.625\n",
      "\t Test accuracy  60.6\n",
      "\t Epoch Loss  2.313507080078125\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  97.1\n",
      "\t Validation accuracy  50.0\n",
      "\t Test accuracy  62.6\n",
      "\t Epoch Loss  2.5620815753936768\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  97.16666666666667\n",
      "\t Validation accuracy  49.375\n",
      "\t Test accuracy  62.5\n",
      "\t Epoch Loss  1.0466957092285156\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  51.875\n",
      "\t Test accuracy  62.4\n",
      "\t Epoch Loss  0.704405665397644\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  97.46666666666667\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  62.2\n",
      "\t Epoch Loss  0.5304573178291321\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  97.46666666666667\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  62.7\n",
      "\t Epoch Loss  0.4184722602367401\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  97.43333333333334\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  62.8\n",
      "\t Epoch Loss  0.33560261130332947\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  97.4\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  62.7\n",
      "\t Epoch Loss  0.27301090955734253\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  97.46666666666667\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  62.8\n",
      "\t Epoch Loss  0.22411149740219116\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  97.5\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  62.8\n",
      "\t Epoch Loss  0.18562999367713928\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  63.0\n",
      "\t Epoch Loss  0.15536805987358093\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  63.1\n",
      "\t Epoch Loss  0.13088130950927734\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  63.3\n",
      "\t Epoch Loss  0.11119627207517624\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  63.7\n",
      "\t Epoch Loss  0.09491337090730667\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  63.9\n",
      "\t Epoch Loss  0.08150099962949753\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  64.1\n",
      "\t Epoch Loss  0.07018913328647614\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  63.9\n",
      "\t Epoch Loss  0.06068940460681915\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  64.3\n",
      "\t Epoch Loss  0.05257584899663925\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  97.53333333333333\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  64.5\n",
      "\t Epoch Loss  0.04571282118558884\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  64.9\n",
      "\t Epoch Loss  0.039836104959249496\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  64.9\n",
      "\t Epoch Loss  0.03473852574825287\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  97.53333333333333\n",
      "\t Validation accuracy  56.25\n",
      "\t Test accuracy  65.0\n",
      "\t Epoch Loss  0.030409442260861397\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  97.53333333333333\n",
      "\t Validation accuracy  56.25\n",
      "\t Test accuracy  65.1\n",
      "\t Epoch Loss  0.026603857055306435\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  97.53333333333333\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  65.1\n",
      "\t Epoch Loss  0.023355090990662575\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  97.53333333333333\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  65.4\n",
      "\t Epoch Loss  0.02057129517197609\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  97.53333333333333\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  65.8\n",
      "\t Epoch Loss  0.018136441707611084\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  97.5\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  65.9\n",
      "\t Epoch Loss  0.015992524102330208\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  97.5\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  66.1\n",
      "\t Epoch Loss  0.014152572490274906\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  97.46666666666667\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.012526833452284336\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  97.43333333333334\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  66.3\n",
      "\t Epoch Loss  0.011074932292103767\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  97.5\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.4\n",
      "\t Epoch Loss  0.009812965989112854\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  97.5\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.3\n",
      "\t Epoch Loss  0.008702609688043594\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  97.53333333333333\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.6\n",
      "\t Epoch Loss  0.0077228667214512825\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.6\n",
      "\t Epoch Loss  0.0068525271490216255\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.5\n",
      "\t Epoch Loss  0.006102972198277712\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.7\n",
      "\t Epoch Loss  0.00542611675336957\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.7\n",
      "\t Epoch Loss  0.0048310342244803905\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.6\n",
      "\t Epoch Loss  0.004295326769351959\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.6\n",
      "\t Epoch Loss  0.0038258968852460384\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  66.6\n",
      "\t Epoch Loss  0.003404452931135893\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  67.0\n",
      "\t Epoch Loss  0.003033798886463046\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  97.56666666666666\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  67.2\n",
      "\t Epoch Loss  0.002700588433071971\n",
      "Repetition 19\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  80.83333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  68.8\n",
      "\t Epoch Loss  125.09798431396484\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  88.36666666666666\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  75.3\n",
      "\t Epoch Loss  80.70911407470703\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  92.36666666666666\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  72.9\n",
      "\t Epoch Loss  49.813289642333984\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  94.4\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  74.8\n",
      "\t Epoch Loss  29.5083065032959\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  95.46666666666667\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  75.2\n",
      "\t Epoch Loss  15.174893379211426\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  5\n",
      "\t Training accuracy:  95.2\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  74.1\n",
      "\t Epoch Loss  7.402347087860107\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  97.16666666666667\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  5.266532897949219\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  74.1\n",
      "\t Epoch Loss  2.419752836227417\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  98.16666666666667\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  74.0\n",
      "\t Epoch Loss  1.6537353992462158\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.8846473097801208\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.6205706596374512\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.4641781449317932\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.3585565388202667\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  74.0\n",
      "\t Epoch Loss  0.2813606262207031\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.22590471804141998\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  98.2\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  74.0\n",
      "\t Epoch Loss  0.18436826765537262\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  74.0\n",
      "\t Epoch Loss  0.1518474817276001\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.1262756884098053\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.10564099252223969\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.08897292613983154\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.07564184814691544\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.06435280293226242\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.05501912534236908\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.04738357663154602\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.04077782481908798\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.03538146987557411\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.030692083761096\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.02667493000626564\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.023270118981599808\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.0203104168176651\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.017845874652266502\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.015571679919958115\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.013698678463697433\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.012054648250341415\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.01063424814492464\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.009350614622235298\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.008233707398176193\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.007258982863277197\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.006419825367629528\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.005677216686308384\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.0050178165547549725\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.5\n",
      "\t Epoch Loss  0.00443932693451643\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  98.43333333333334\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.5\n",
      "\t Epoch Loss  0.003932799678295851\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.0034901185426861048\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.003086108947172761\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  98.43333333333334\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.5\n",
      "\t Epoch Loss  0.0027476127725094557\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  98.46666666666667\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.4\n",
      "\t Epoch Loss  0.0024286643601953983\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  98.43333333333334\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.5\n",
      "\t Epoch Loss  0.002151493215933442\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  98.46666666666667\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.4\n",
      "\t Epoch Loss  0.001913997228257358\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  98.46666666666667\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.0016952307196334004\n",
      "Repetition 20\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  69.13333333333334\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  51.4\n",
      "\t Epoch Loss  127.72686767578125\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  86.6\n",
      "\t Validation accuracy  72.5\n",
      "\t Test accuracy  66.5\n",
      "\t Epoch Loss  90.49425506591797\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  92.86666666666666\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  64.8\n",
      "\t Epoch Loss  53.346534729003906\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  96.0\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  68.6\n",
      "\t Epoch Loss  28.025043487548828\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  97.3\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  69.2\n",
      "\t Epoch Loss  15.160326957702637\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  98.06666666666666\n",
      "\t Validation accuracy  79.375\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  7.385801315307617\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  82.5\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  4.233124256134033\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  98.5\n",
      "\t Validation accuracy  82.5\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  2.5842294692993164\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  1.7027063369750977\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  98.6\n",
      "\t Validation accuracy  82.5\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  1.145795226097107\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  98.8\n",
      "\t Validation accuracy  82.5\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  0.8140999674797058\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  98.83333333333333\n",
      "\t Validation accuracy  82.5\n",
      "\t Test accuracy  71.3\n",
      "\t Epoch Loss  0.6050513386726379\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  98.9\n",
      "\t Validation accuracy  82.5\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  0.46990394592285156\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  99.0\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  0.36753371357917786\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  99.2\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.1\n",
      "\t Epoch Loss  0.29506948590278625\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  99.2\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.2373775988817215\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  99.16666666666667\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  0.19444547593593597\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  99.2\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.1\n",
      "\t Epoch Loss  0.16063235700130463\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.1\n",
      "\t Epoch Loss  0.1336241066455841\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.3\n",
      "\t Epoch Loss  0.11286826431751251\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  99.3\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  0.09529383480548859\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.08130552619695663\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  0.06976648420095444\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.1\n",
      "\t Epoch Loss  0.06012524664402008\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.05178598314523697\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.044974230229854584\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.0388646200299263\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.033802587538957596\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  70.8\n",
      "\t Epoch Loss  0.0295080728828907\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  99.3\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.1\n",
      "\t Epoch Loss  0.02582574263215065\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  99.3\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  70.9\n",
      "\t Epoch Loss  0.022482383996248245\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  99.3\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  70.9\n",
      "\t Epoch Loss  0.0197442639619112\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  99.3\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.01734623685479164\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  99.33333333333333\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.015236733481287956\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  70.6\n",
      "\t Epoch Loss  0.013395792804658413\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  99.36666666666666\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.011793273501098156\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  99.36666666666666\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  70.6\n",
      "\t Epoch Loss  0.01039997860789299\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  99.36666666666666\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.009166156873106956\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.008088522590696812\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.007141817361116409\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.006327800452709198\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  0.005583455786108971\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  70.8\n",
      "\t Epoch Loss  0.00495760515332222\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  0.004382191225886345\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.1\n",
      "\t Epoch Loss  0.0038830048870295286\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.2\n",
      "\t Epoch Loss  0.0034503720235079527\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.3\n",
      "\t Epoch Loss  0.0030694955494254827\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  99.4\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.4\n",
      "\t Epoch Loss  0.0027142097242176533\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  99.43333333333334\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.4\n",
      "\t Epoch Loss  0.002419443568214774\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  99.43333333333334\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  71.4\n",
      "\t Epoch Loss  0.0021459246054291725\n",
      "Repetition 21\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  70.06666666666666\n",
      "\t Validation accuracy  36.875\n",
      "\t Test accuracy  49.7\n",
      "\t Epoch Loss  131.1847686767578\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  81.1\n",
      "\t Validation accuracy  46.875\n",
      "\t Test accuracy  53.9\n",
      "\t Epoch Loss  106.0963363647461\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  89.7\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  51.9\n",
      "\t Epoch Loss  71.94139862060547\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  93.63333333333334\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  59.0\n",
      "\t Epoch Loss  40.371063232421875\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  96.76666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  59.9\n",
      "\t Epoch Loss  20.930156707763672\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  96.63333333333334\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  59.9\n",
      "\t Epoch Loss  9.313319206237793\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  95.23333333333333\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  55.4\n",
      "\t Epoch Loss  7.248440265655518\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  97.76666666666667\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  59.4\n",
      "\t Epoch Loss  4.408538341522217\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  98.13333333333334\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  59.5\n",
      "\t Epoch Loss  2.0504090785980225\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  59.6\n",
      "\t Epoch Loss  1.156112551689148\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  60.2\n",
      "\t Epoch Loss  0.819363534450531\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  62.5\n",
      "\t Test accuracy  59.7\n",
      "\t Epoch Loss  0.6102697253227234\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  60.1\n",
      "\t Epoch Loss  0.46997395157814026\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  98.13333333333334\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  59.4\n",
      "\t Epoch Loss  0.36596983671188354\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  98.13333333333334\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  59.6\n",
      "\t Epoch Loss  0.2932056784629822\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  59.7\n",
      "\t Epoch Loss  0.23779579997062683\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  98.13333333333334\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  59.3\n",
      "\t Epoch Loss  0.19588206708431244\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  98.2\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  59.6\n",
      "\t Epoch Loss  0.1628134846687317\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  98.16666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  59.7\n",
      "\t Epoch Loss  0.13647358119487762\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  98.13333333333334\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  59.6\n",
      "\t Epoch Loss  0.11501792073249817\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  98.1\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  59.7\n",
      "\t Epoch Loss  0.0978342592716217\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  98.2\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  59.5\n",
      "\t Epoch Loss  0.0836116150021553\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  22\n",
      "\t Training accuracy:  98.13333333333334\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  59.5\n",
      "\t Epoch Loss  0.07161840796470642\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  98.1\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  59.4\n",
      "\t Epoch Loss  0.061439912766218185\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  59.0\n",
      "\t Epoch Loss  0.05295354127883911\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  58.8\n",
      "\t Epoch Loss  0.04590672254562378\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  58.8\n",
      "\t Epoch Loss  0.039902426302433014\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  58.6\n",
      "\t Epoch Loss  0.034866366535425186\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.6\n",
      "\t Epoch Loss  0.03040454536676407\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.7\n",
      "\t Epoch Loss  0.026672111824154854\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.7\n",
      "\t Epoch Loss  0.023335212841629982\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.3\n",
      "\t Epoch Loss  0.02054651826620102\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.1\n",
      "\t Epoch Loss  0.017986638471484184\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  58.1\n",
      "\t Epoch Loss  0.015824217349290848\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  58.2\n",
      "\t Epoch Loss  0.013931293040513992\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.2\n",
      "\t Epoch Loss  0.01226500328630209\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.2\n",
      "\t Epoch Loss  0.010815977118909359\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.1\n",
      "\t Epoch Loss  0.00956928264349699\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.1\n",
      "\t Epoch Loss  0.008432603441178799\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  58.0\n",
      "\t Epoch Loss  0.007479311898350716\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  57.8\n",
      "\t Epoch Loss  0.006609724368900061\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  57.8\n",
      "\t Epoch Loss  0.005860024597495794\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  57.6\n",
      "\t Epoch Loss  0.005188676994293928\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  65.0\n",
      "\t Test accuracy  57.6\n",
      "\t Epoch Loss  0.004592875484377146\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  57.4\n",
      "\t Epoch Loss  0.0040788957849144936\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  57.5\n",
      "\t Epoch Loss  0.003615032183006406\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  57.8\n",
      "\t Epoch Loss  0.003226942615583539\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  57.7\n",
      "\t Epoch Loss  0.0028604117687791586\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  57.7\n",
      "\t Epoch Loss  0.0025474720168858767\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  66.25\n",
      "\t Test accuracy  58.0\n",
      "\t Epoch Loss  0.0022638754453510046\n",
      "Repetition 22\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  65.7\n",
      "\t Validation accuracy  48.75\n",
      "\t Test accuracy  48.8\n",
      "\t Epoch Loss  133.39410400390625\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  78.9\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  54.1\n",
      "\t Epoch Loss  111.65081787109375\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  88.53333333333333\n",
      "\t Validation accuracy  46.875\n",
      "\t Test accuracy  67.3\n",
      "\t Epoch Loss  73.07284545898438\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  94.73333333333333\n",
      "\t Validation accuracy  57.5\n",
      "\t Test accuracy  67.5\n",
      "\t Epoch Loss  40.50928497314453\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  97.06666666666666\n",
      "\t Validation accuracy  58.125\n",
      "\t Test accuracy  67.7\n",
      "\t Epoch Loss  21.039113998413086\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  97.5\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  67.2\n",
      "\t Epoch Loss  9.408529281616211\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  97.6\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  64.0\n",
      "\t Epoch Loss  4.7796630859375\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  97.53333333333333\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  64.2\n",
      "\t Epoch Loss  2.6834678649902344\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  97.66666666666667\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  64.0\n",
      "\t Epoch Loss  1.6583187580108643\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  97.7\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  64.0\n",
      "\t Epoch Loss  1.1302536725997925\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  97.73333333333333\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  64.7\n",
      "\t Epoch Loss  0.8011806011199951\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  97.8\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  64.5\n",
      "\t Epoch Loss  0.6447846293449402\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  97.8\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  64.7\n",
      "\t Epoch Loss  0.46100327372550964\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  65.0\n",
      "\t Epoch Loss  0.36824342608451843\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  65.4\n",
      "\t Epoch Loss  0.2868906557559967\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  65.7\n",
      "\t Epoch Loss  0.23215413093566895\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  65.2\n",
      "\t Epoch Loss  0.189652681350708\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  65.5\n",
      "\t Epoch Loss  0.15681366622447968\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  65.3\n",
      "\t Epoch Loss  0.13063110411167145\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  65.5\n",
      "\t Epoch Loss  0.11070297658443451\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  65.8\n",
      "\t Epoch Loss  0.09309341013431549\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  65.8\n",
      "\t Epoch Loss  0.07961492240428925\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  65.7\n",
      "\t Epoch Loss  0.06830445677042007\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  65.7\n",
      "\t Epoch Loss  0.059036996215581894\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  65.8\n",
      "\t Epoch Loss  0.050751250237226486\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  65.9\n",
      "\t Epoch Loss  0.043963219970464706\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.0\n",
      "\t Epoch Loss  0.03805631771683693\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.1\n",
      "\t Epoch Loss  0.03301160782575607\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.0\n",
      "\t Epoch Loss  0.028916632756590843\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.1\n",
      "\t Epoch Loss  0.02517637237906456\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.02207850106060505\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.01943841576576233\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.3\n",
      "\t Epoch Loss  0.016939645633101463\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.5\n",
      "\t Epoch Loss  0.01501843985170126\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.3\n",
      "\t Epoch Loss  0.013158921152353287\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  66.5\n",
      "\t Epoch Loss  0.011660725809633732\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.5\n",
      "\t Epoch Loss  0.010262548923492432\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.3\n",
      "\t Epoch Loss  0.009006934240460396\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.4\n",
      "\t Epoch Loss  0.007963107898831367\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.1\n",
      "\t Epoch Loss  0.007081933785229921\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.3\n",
      "\t Epoch Loss  0.006265358068048954\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.1\n",
      "\t Epoch Loss  0.005544269923120737\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.1\n",
      "\t Epoch Loss  0.004931116010993719\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.1\n",
      "\t Epoch Loss  0.004347296431660652\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  60.0\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.003870628075674176\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.0034444015473127365\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  97.9\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.0030525815673172474\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  59.375\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.0027177457232028246\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  60.0\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.0024102269671857357\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  97.86666666666666\n",
      "\t Validation accuracy  59.375\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.002129145199432969\n",
      "Repetition 23\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  73.23333333333333\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  64.1\n",
      "\t Epoch Loss  129.02947998046875\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  89.36666666666666\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  76.2\n",
      "\t Epoch Loss  85.60140991210938\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  94.33333333333333\n",
      "\t Validation accuracy  77.5\n",
      "\t Test accuracy  76.3\n",
      "\t Epoch Loss  47.49303436279297\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  98.2\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  74.9\n",
      "\t Epoch Loss  26.244348526000977\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  98.56666666666666\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  72.9\n",
      "\t Epoch Loss  13.237460136413574\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  97.96666666666667\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  7.106291770935059\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  99.0\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  76.3\n",
      "\t Epoch Loss  4.261391639709473\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  98.96666666666667\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.2\n",
      "\t Epoch Loss  1.7193803787231445\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  98.96666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  75.4\n",
      "\t Epoch Loss  1.0939805507659912\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  99.0\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.8\n",
      "\t Epoch Loss  0.7703635096549988\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  99.0\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  74.9\n",
      "\t Epoch Loss  0.5712248682975769\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  99.03333333333333\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.2\n",
      "\t Epoch Loss  0.43272894620895386\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  99.03333333333333\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.2\n",
      "\t Epoch Loss  0.3366727828979492\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  99.06666666666666\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.3\n",
      "\t Epoch Loss  0.26675060391426086\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  99.03333333333333\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.0\n",
      "\t Epoch Loss  0.21470727026462555\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  99.1\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  75.0\n",
      "\t Epoch Loss  0.17601804435253143\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  99.1\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  75.0\n",
      "\t Epoch Loss  0.14501778781414032\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  99.13333333333334\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.6\n",
      "\t Epoch Loss  0.1206943690776825\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  99.13333333333334\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.6\n",
      "\t Epoch Loss  0.10166282206773758\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  99.16666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.5\n",
      "\t Epoch Loss  0.08625113219022751\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  99.16666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.7\n",
      "\t Epoch Loss  0.07331007719039917\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  99.16666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.6\n",
      "\t Epoch Loss  0.06287524104118347\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  99.2\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.4\n",
      "\t Epoch Loss  0.05387839674949646\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.5\n",
      "\t Epoch Loss  0.046523962169885635\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.4\n",
      "\t Epoch Loss  0.04009975120425224\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.5\n",
      "\t Epoch Loss  0.03480980545282364\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.5\n",
      "\t Epoch Loss  0.030322477221488953\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.6\n",
      "\t Epoch Loss  0.026372235268354416\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.5\n",
      "\t Epoch Loss  0.02311820723116398\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  99.3\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.4\n",
      "\t Epoch Loss  0.020232848823070526\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.5\n",
      "\t Epoch Loss  0.0177154503762722\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.7\n",
      "\t Epoch Loss  0.015551293268799782\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.8\n",
      "\t Epoch Loss  0.013675673864781857\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.7\n",
      "\t Epoch Loss  0.012040632776916027\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  75.0\n",
      "\t Epoch Loss  0.010619258508086205\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.9\n",
      "\t Epoch Loss  0.0093665337190032\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  75.0\n",
      "\t Epoch Loss  0.00827846396714449\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  75.0\n",
      "\t Epoch Loss  0.007341131567955017\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  99.23333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  75.0\n",
      "\t Epoch Loss  0.006513568572700024\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  75.0\n",
      "\t Epoch Loss  0.005771906580775976\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.9\n",
      "\t Epoch Loss  0.005110655911266804\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  74.9\n",
      "\t Epoch Loss  0.00454280199483037\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.0\n",
      "\t Epoch Loss  0.004030903335660696\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  74.9\n",
      "\t Epoch Loss  0.003568015992641449\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  74.9\n",
      "\t Epoch Loss  0.0031682986300438643\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.2\n",
      "\t Epoch Loss  0.0028105697128921747\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  75.2\n",
      "\t Epoch Loss  0.002498453250154853\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.2\n",
      "\t Epoch Loss  0.0022225091233849525\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.3\n",
      "\t Epoch Loss  0.0019748760387301445\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  99.26666666666667\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  75.4\n",
      "\t Epoch Loss  0.001753706601448357\n",
      "Repetition 24\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  68.5\n",
      "\t Validation accuracy  18.125\n",
      "\t Test accuracy  48.4\n",
      "\t Epoch Loss  131.7706298828125\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  85.3\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  63.5\n",
      "\t Epoch Loss  97.80302429199219\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  92.8\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  67.4\n",
      "\t Epoch Loss  55.62465286254883\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  95.1\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  68.0\n",
      "\t Epoch Loss  30.431961059570312\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  97.13333333333334\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  70.7\n",
      "\t Epoch Loss  15.891819953918457\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  97.8\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  69.1\n",
      "\t Epoch Loss  9.95856761932373\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  97.63333333333334\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  69.9\n",
      "\t Epoch Loss  4.312308311462402\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  3.4322166442871094\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  71.0\n",
      "\t Epoch Loss  5.67287015914917\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  98.63333333333334\n",
      "\t Validation accuracy  71.875\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  1.6361697912216187\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.8680293560028076\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.620999276638031\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  12\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.48046720027923584\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.38196226954460144\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.31124213337898254\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.2556484341621399\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.21225160360336304\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.17808294296264648\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.14967995882034302\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.126925528049469\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.10768552869558334\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.09247341006994247\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.07942897826433182\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.06772345304489136\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.05868285521864891\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.0509101077914238\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.0440177358686924\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.0384734570980072\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.033581215888261795\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.029472485184669495\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.02568255178630352\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.02246161736547947\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.019767604768276215\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.017315471544861794\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.01522277481853962\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.013439379632472992\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  36\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.011789437383413315\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.010457818396389484\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.009285216219723225\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.008146020583808422\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.007195502985268831\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  51.0\n",
      "\t Validation accuracy  37.5\n",
      "\t Test accuracy  49.0\n",
      "\t Epoch Loss  0.006384592037647963\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  69.5\n",
      "\t Epoch Loss  0.005780561827123165\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  98.6\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  70.3\n",
      "\t Epoch Loss  0.005117220338433981\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  98.6\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.004442333709448576\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  98.63333333333334\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.0038689435459673405\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  98.63333333333334\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  70.0\n",
      "\t Epoch Loss  0.0034104615915566683\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  98.66666666666667\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  70.4\n",
      "\t Epoch Loss  0.0030162809416651726\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  98.66666666666667\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  70.4\n",
      "\t Epoch Loss  0.0026615101378411055\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  0.002367960521951318\n",
      "Repetition 25\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  70.76666666666667\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  49.5\n",
      "\t Epoch Loss  129.43995666503906\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  80.9\n",
      "\t Validation accuracy  55.0\n",
      "\t Test accuracy  54.9\n",
      "\t Epoch Loss  104.73172760009766\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  87.2\n",
      "\t Validation accuracy  58.125\n",
      "\t Test accuracy  61.8\n",
      "\t Epoch Loss  72.14894104003906\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  92.03333333333333\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  64.2\n",
      "\t Epoch Loss  44.05086898803711\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  93.93333333333334\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  25.822002410888672\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  95.73333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  68.1\n",
      "\t Epoch Loss  16.14666748046875\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  96.7\n",
      "\t Validation accuracy  56.875\n",
      "\t Test accuracy  68.4\n",
      "\t Epoch Loss  8.27669620513916\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  97.03333333333333\n",
      "\t Validation accuracy  56.875\n",
      "\t Test accuracy  68.3\n",
      "\t Epoch Loss  3.9360809326171875\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  97.13333333333334\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  67.7\n",
      "\t Epoch Loss  2.377032995223999\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  97.03333333333333\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  67.2\n",
      "\t Epoch Loss  1.577630877494812\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  97.1\n",
      "\t Validation accuracy  59.375\n",
      "\t Test accuracy  67.4\n",
      "\t Epoch Loss  1.1071346998214722\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  97.16666666666667\n",
      "\t Validation accuracy  59.375\n",
      "\t Test accuracy  67.8\n",
      "\t Epoch Loss  0.8141030073165894\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  97.13333333333334\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  67.6\n",
      "\t Epoch Loss  0.6121034026145935\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  97.1\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  67.7\n",
      "\t Epoch Loss  0.4702240824699402\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  97.13333333333334\n",
      "\t Validation accuracy  59.375\n",
      "\t Test accuracy  67.7\n",
      "\t Epoch Loss  0.36753571033477783\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  97.13333333333334\n",
      "\t Validation accuracy  59.375\n",
      "\t Test accuracy  67.5\n",
      "\t Epoch Loss  0.29277798533439636\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  97.16666666666667\n",
      "\t Validation accuracy  59.375\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.23615391552448273\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  97.2\n",
      "\t Validation accuracy  59.375\n",
      "\t Test accuracy  67.2\n",
      "\t Epoch Loss  0.19430740177631378\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  97.16666666666667\n",
      "\t Validation accuracy  60.0\n",
      "\t Test accuracy  67.2\n",
      "\t Epoch Loss  0.16071124374866486\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  97.2\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  67.4\n",
      "\t Epoch Loss  0.13467109203338623\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  97.2\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.11321986466646194\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  97.23333333333333\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.09625960141420364\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  97.2\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  67.0\n",
      "\t Epoch Loss  0.08190031349658966\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  97.26666666666667\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.07048752158880234\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  97.23333333333333\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  67.0\n",
      "\t Epoch Loss  0.0604463629424572\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  67.0\n",
      "\t Epoch Loss  0.052167367190122604\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.044898517429828644\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.03890235722064972\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  97.33333333333333\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  67.2\n",
      "\t Epoch Loss  0.03401729464530945\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  67.3\n",
      "\t Epoch Loss  0.030078213661909103\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  97.4\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  67.3\n",
      "\t Epoch Loss  0.025760039687156677\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  63.75\n",
      "\t Test accuracy  67.4\n",
      "\t Epoch Loss  0.022484222427010536\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.01958744041621685\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  67.3\n",
      "\t Epoch Loss  0.01711401343345642\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  64.375\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.015012655407190323\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  97.33333333333333\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.0\n",
      "\t Epoch Loss  0.013122264295816422\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.0\n",
      "\t Epoch Loss  0.011555825360119343\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  97.43333333333334\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.010143355466425419\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  97.43333333333334\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.008951843716204166\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  97.43333333333334\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.00791033823043108\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  97.36666666666666\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.006927190348505974\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  97.43333333333334\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.00609959289431572\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  97.4\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.1\n",
      "\t Epoch Loss  0.005385507829487324\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  97.43333333333334\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.3\n",
      "\t Epoch Loss  0.00475020008161664\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  97.43333333333334\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.3\n",
      "\t Epoch Loss  0.004219286609441042\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  97.4\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.4\n",
      "\t Epoch Loss  0.00373428245075047\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  97.4\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.5\n",
      "\t Epoch Loss  0.003304019570350647\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  97.4\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.3\n",
      "\t Epoch Loss  0.002933805575594306\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  97.4\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.2\n",
      "\t Epoch Loss  0.0025964651722460985\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  97.4\n",
      "\t Validation accuracy  65.625\n",
      "\t Test accuracy  67.2\n",
      "\t Epoch Loss  0.0022968798875808716\n",
      "Repetition 26\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  77.6\n",
      "\t Validation accuracy  61.25\n",
      "\t Test accuracy  60.2\n",
      "\t Epoch Loss  126.56723022460938\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  83.63333333333334\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  69.0\n",
      "\t Epoch Loss  84.6328353881836\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  92.56666666666666\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  69.4\n",
      "\t Epoch Loss  49.99467849731445\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  93.53333333333333\n",
      "\t Validation accuracy  66.25\n",
      "\t Test accuracy  70.2\n",
      "\t Epoch Loss  25.651472091674805\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  92.63333333333334\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  69.7\n",
      "\t Epoch Loss  12.353598594665527\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  94.76666666666667\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  72.3\n",
      "\t Epoch Loss  8.247013092041016\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  6\n",
      "\t Training accuracy:  95.2\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  72.2\n",
      "\t Epoch Loss  3.1263246536254883\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  95.5\n",
      "\t Validation accuracy  66.25\n",
      "\t Test accuracy  72.4\n",
      "\t Epoch Loss  1.7643276453018188\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  95.76666666666667\n",
      "\t Validation accuracy  66.875\n",
      "\t Test accuracy  72.4\n",
      "\t Epoch Loss  1.2113338708877563\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  95.86666666666666\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  72.1\n",
      "\t Epoch Loss  0.8614027500152588\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  95.96666666666667\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  72.4\n",
      "\t Epoch Loss  0.6351423859596252\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  96.0\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  72.1\n",
      "\t Epoch Loss  0.4797108769416809\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  95.96666666666667\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  72.2\n",
      "\t Epoch Loss  0.37515988945961\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  96.0\n",
      "\t Validation accuracy  67.5\n",
      "\t Test accuracy  72.3\n",
      "\t Epoch Loss  0.2975642681121826\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  96.03333333333333\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.3\n",
      "\t Epoch Loss  0.241286501288414\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  96.03333333333333\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  72.3\n",
      "\t Epoch Loss  0.19677336513996124\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  96.03333333333333\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  72.3\n",
      "\t Epoch Loss  0.1629830151796341\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  96.03333333333333\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  72.3\n",
      "\t Epoch Loss  0.13549046218395233\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  96.03333333333333\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  72.2\n",
      "\t Epoch Loss  0.11380940675735474\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  96.03333333333333\n",
      "\t Validation accuracy  68.125\n",
      "\t Test accuracy  72.1\n",
      "\t Epoch Loss  0.09612386673688889\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  96.03333333333333\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.3\n",
      "\t Epoch Loss  0.08170393854379654\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  96.03333333333333\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.4\n",
      "\t Epoch Loss  0.06986433267593384\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  96.06666666666666\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.4\n",
      "\t Epoch Loss  0.059902362525463104\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  96.1\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.6\n",
      "\t Epoch Loss  0.05153654143214226\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  96.1\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.5\n",
      "\t Epoch Loss  0.04458363354206085\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  96.1\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.5\n",
      "\t Epoch Loss  0.03888460621237755\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  96.1\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.5\n",
      "\t Epoch Loss  0.03385598212480545\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  96.1\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.6\n",
      "\t Epoch Loss  0.02930314652621746\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  96.1\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.6\n",
      "\t Epoch Loss  0.02585929073393345\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  96.1\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.4\n",
      "\t Epoch Loss  0.02248157374560833\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  96.16666666666667\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.4\n",
      "\t Epoch Loss  0.01996009796857834\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  96.13333333333334\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.3\n",
      "\t Epoch Loss  0.017319820821285248\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  96.23333333333333\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.4\n",
      "\t Epoch Loss  0.015299715101718903\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  96.23333333333333\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.4\n",
      "\t Epoch Loss  0.013468370772898197\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  96.26666666666667\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.7\n",
      "\t Epoch Loss  0.011792114935815334\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  96.26666666666667\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.6\n",
      "\t Epoch Loss  0.010487886145710945\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  96.2\n",
      "\t Validation accuracy  68.75\n",
      "\t Test accuracy  72.8\n",
      "\t Epoch Loss  0.009140127338469028\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  96.2\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.5\n",
      "\t Epoch Loss  0.008191531524062157\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  96.23333333333333\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  72.5\n",
      "\t Epoch Loss  0.007178615778684616\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  96.3\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  72.7\n",
      "\t Epoch Loss  0.006357632577419281\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  96.33333333333333\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.8\n",
      "\t Epoch Loss  0.005631641484797001\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  96.33333333333333\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.9\n",
      "\t Epoch Loss  0.005001658573746681\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  96.3\n",
      "\t Validation accuracy  69.375\n",
      "\t Test accuracy  72.9\n",
      "\t Epoch Loss  0.004417593125253916\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  96.3\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  72.9\n",
      "\t Epoch Loss  0.003929708153009415\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  96.3\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  73.0\n",
      "\t Epoch Loss  0.003485666820779443\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  96.3\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  73.0\n",
      "\t Epoch Loss  0.003103097667917609\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  96.4\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  73.0\n",
      "\t Epoch Loss  0.0027716828044503927\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  96.36666666666666\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  73.0\n",
      "\t Epoch Loss  0.0024497578851878643\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  96.4\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  73.0\n",
      "\t Epoch Loss  0.002181418938562274\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  96.4\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  73.0\n",
      "\t Epoch Loss  0.0019444221397861838\n",
      "Repetition 27\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  68.6\n",
      "\t Validation accuracy  58.75\n",
      "\t Test accuracy  48.9\n",
      "\t Epoch Loss  131.86541748046875\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  80.66666666666667\n",
      "\t Validation accuracy  66.25\n",
      "\t Test accuracy  61.6\n",
      "\t Epoch Loss  110.60810852050781\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  88.3\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  69.6\n",
      "\t Epoch Loss  77.87467956542969\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  3\n",
      "\t Training accuracy:  93.83333333333333\n",
      "\t Validation accuracy  70.0\n",
      "\t Test accuracy  72.6\n",
      "\t Epoch Loss  46.81173324584961\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  94.7\n",
      "\t Validation accuracy  82.5\n",
      "\t Test accuracy  75.6\n",
      "\t Epoch Loss  26.035442352294922\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  95.1\n",
      "\t Validation accuracy  77.5\n",
      "\t Test accuracy  72.3\n",
      "\t Epoch Loss  14.717183113098145\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  96.76666666666667\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  73.5\n",
      "\t Epoch Loss  8.866877555847168\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  97.73333333333333\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  73.3\n",
      "\t Epoch Loss  4.723354339599609\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  97.83333333333333\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  72.9\n",
      "\t Epoch Loss  3.0869221687316895\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  97.93333333333334\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  73.2\n",
      "\t Epoch Loss  2.003288507461548\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  98.03333333333333\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  73.5\n",
      "\t Epoch Loss  1.4403938055038452\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  98.06666666666666\n",
      "\t Validation accuracy  81.875\n",
      "\t Test accuracy  73.1\n",
      "\t Epoch Loss  1.0569278001785278\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  98.23333333333333\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  73.4\n",
      "\t Epoch Loss  0.8050928115844727\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  81.25\n",
      "\t Test accuracy  73.2\n",
      "\t Epoch Loss  0.6253891587257385\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  80.625\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.501643180847168\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  73.5\n",
      "\t Epoch Loss  0.39842551946640015\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  98.3\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  74.1\n",
      "\t Epoch Loss  0.3269374370574951\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  98.26666666666667\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  74.1\n",
      "\t Epoch Loss  0.2652210593223572\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.21927028894424438\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  98.36666666666666\n",
      "\t Validation accuracy  80.0\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.1841181218624115\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.15376195311546326\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  78.75\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.130990669131279\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  98.43333333333334\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.0\n",
      "\t Epoch Loss  0.11099084466695786\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  74.0\n",
      "\t Epoch Loss  0.0947602167725563\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  78.125\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.08141013234853745\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  77.5\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.06965866684913635\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  98.56666666666666\n",
      "\t Validation accuracy  77.5\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.060032207518815994\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  77.5\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.05170297995209694\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  77.5\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.04499467834830284\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.03918817266821861\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.033769845962524414\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  98.56666666666666\n",
      "\t Validation accuracy  76.875\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.029653172940015793\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  98.6\n",
      "\t Validation accuracy  76.25\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.02587428130209446\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  98.63333333333334\n",
      "\t Validation accuracy  75.625\n",
      "\t Test accuracy  73.6\n",
      "\t Epoch Loss  0.02272425778210163\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  98.63333333333334\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.020042695105075836\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  98.66666666666667\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.5\n",
      "\t Epoch Loss  0.017428921535611153\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  98.66666666666667\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.015305504202842712\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.7\n",
      "\t Epoch Loss  0.013333309441804886\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.011751001700758934\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.8\n",
      "\t Epoch Loss  0.010310119017958641\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  98.76666666666667\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.009094428271055222\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  74.0\n",
      "\t Epoch Loss  0.008029624819755554\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  98.83333333333333\n",
      "\t Validation accuracy  75.0\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.007087674457579851\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  98.76666666666667\n",
      "\t Validation accuracy  74.375\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.00625684205442667\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  98.8\n",
      "\t Validation accuracy  74.375\n",
      "\t Test accuracy  74.0\n",
      "\t Epoch Loss  0.005544139072299004\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  98.83333333333333\n",
      "\t Validation accuracy  74.375\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.00489045400172472\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  46\n",
      "\t Training accuracy:  98.83333333333333\n",
      "\t Validation accuracy  74.375\n",
      "\t Test accuracy  74.0\n",
      "\t Epoch Loss  0.004336217418313026\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  98.8\n",
      "\t Validation accuracy  74.375\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.0038511294405907393\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  98.83333333333333\n",
      "\t Validation accuracy  74.375\n",
      "\t Test accuracy  74.1\n",
      "\t Epoch Loss  0.0034189189318567514\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  98.83333333333333\n",
      "\t Validation accuracy  73.75\n",
      "\t Test accuracy  73.9\n",
      "\t Epoch Loss  0.0030248428229242563\n",
      "Repetition 28\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  0\n",
      "\t Training accuracy:  70.26666666666667\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  54.5\n",
      "\t Epoch Loss  130.55862426757812\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  1\n",
      "\t Training accuracy:  79.46666666666667\n",
      "\t Validation accuracy  58.125\n",
      "\t Test accuracy  58.6\n",
      "\t Epoch Loss  107.60413360595703\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  2\n",
      "\t Training accuracy:  86.7\n",
      "\t Validation accuracy  61.875\n",
      "\t Test accuracy  64.4\n",
      "\t Epoch Loss  75.78236389160156\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  3\n",
      "\t Training accuracy:  92.96666666666667\n",
      "\t Validation accuracy  63.125\n",
      "\t Test accuracy  63.1\n",
      "\t Epoch Loss  47.8569221496582\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  4\n",
      "\t Training accuracy:  95.43333333333334\n",
      "\t Validation accuracy  60.625\n",
      "\t Test accuracy  63.4\n",
      "\t Epoch Loss  28.802555084228516\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  5\n",
      "\t Training accuracy:  96.26666666666667\n",
      "\t Validation accuracy  56.25\n",
      "\t Test accuracy  62.4\n",
      "\t Epoch Loss  15.277791023254395\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  6\n",
      "\t Training accuracy:  95.93333333333334\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  63.8\n",
      "\t Epoch Loss  8.756969451904297\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  7\n",
      "\t Training accuracy:  97.0\n",
      "\t Validation accuracy  55.625\n",
      "\t Test accuracy  62.8\n",
      "\t Epoch Loss  7.856990814208984\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  8\n",
      "\t Training accuracy:  98.0\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  63.6\n",
      "\t Epoch Loss  3.404282331466675\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  9\n",
      "\t Training accuracy:  98.1\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  63.5\n",
      "\t Epoch Loss  1.9025752544403076\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  10\n",
      "\t Training accuracy:  98.33333333333333\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  64.1\n",
      "\t Epoch Loss  1.3234609365463257\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  11\n",
      "\t Training accuracy:  98.4\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  64.0\n",
      "\t Epoch Loss  0.9518254995346069\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  12\n",
      "\t Training accuracy:  98.56666666666666\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  64.7\n",
      "\t Epoch Loss  0.7187021374702454\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  13\n",
      "\t Training accuracy:  98.56666666666666\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  64.9\n",
      "\t Epoch Loss  0.5612698793411255\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  14\n",
      "\t Training accuracy:  98.56666666666666\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  64.9\n",
      "\t Epoch Loss  0.4450828731060028\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  15\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  65.1\n",
      "\t Epoch Loss  0.3592436909675598\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  16\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  65.0\n",
      "\t Epoch Loss  0.29260480403900146\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  17\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  51.875\n",
      "\t Test accuracy  65.1\n",
      "\t Epoch Loss  0.2415749430656433\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  18\n",
      "\t Training accuracy:  98.5\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  65.1\n",
      "\t Epoch Loss  0.200952410697937\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  19\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  65.4\n",
      "\t Epoch Loss  0.16780197620391846\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  20\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  65.4\n",
      "\t Epoch Loss  0.14103394746780396\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  21\n",
      "\t Training accuracy:  98.53333333333333\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  65.2\n",
      "\t Epoch Loss  0.11857065558433533\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  22\n",
      "\t Training accuracy:  98.6\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.4\n",
      "\t Epoch Loss  0.10130376368761063\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  23\n",
      "\t Training accuracy:  98.6\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  65.4\n",
      "\t Epoch Loss  0.08703457564115524\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  24\n",
      "\t Training accuracy:  98.63333333333334\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  65.4\n",
      "\t Epoch Loss  0.07422444224357605\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  25\n",
      "\t Training accuracy:  98.63333333333334\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  65.4\n",
      "\t Epoch Loss  0.06358220428228378\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  26\n",
      "\t Training accuracy:  98.66666666666667\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.3\n",
      "\t Epoch Loss  0.05535423755645752\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  27\n",
      "\t Training accuracy:  98.66666666666667\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.0\n",
      "\t Epoch Loss  0.04781349375844002\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  28\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.0\n",
      "\t Epoch Loss  0.04128103330731392\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  29\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.3\n",
      "\t Epoch Loss  0.03613853082060814\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  30\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.4\n",
      "\t Epoch Loss  0.031194429844617844\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  31\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.5\n",
      "\t Epoch Loss  0.027500275522470474\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  32\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  65.3\n",
      "\t Epoch Loss  0.023913944140076637\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  33\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  65.3\n",
      "\t Epoch Loss  0.0208708755671978\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  34\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.6\n",
      "\t Epoch Loss  0.018300389871001244\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  35\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.6\n",
      "\t Epoch Loss  0.01609233021736145\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  36\n",
      "\t Training accuracy:  98.7\n",
      "\t Validation accuracy  54.375\n",
      "\t Test accuracy  65.8\n",
      "\t Epoch Loss  0.014209706336259842\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  37\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  66.0\n",
      "\t Epoch Loss  0.012494359165430069\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  38\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  66.2\n",
      "\t Epoch Loss  0.010977759957313538\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  39\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  66.3\n",
      "\t Epoch Loss  0.009659149684011936\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  40\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  66.5\n",
      "\t Epoch Loss  0.008584239520132542\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  41\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  66.6\n",
      "\t Epoch Loss  0.007575562689453363\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  42\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  66.5\n",
      "\t Epoch Loss  0.006736184470355511\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  43\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  66.4\n",
      "\t Epoch Loss  0.005931766238063574\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  44\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  52.5\n",
      "\t Test accuracy  66.5\n",
      "\t Epoch Loss  0.005301186349242926\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  45\n",
      "\t Training accuracy:  98.76666666666667\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  66.6\n",
      "\t Epoch Loss  0.00464516319334507\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch Number :  46\n",
      "\t Training accuracy:  98.76666666666667\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  66.7\n",
      "\t Epoch Loss  0.004133957903832197\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  47\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  66.6\n",
      "\t Epoch Loss  0.003673778148368001\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  48\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  53.125\n",
      "\t Test accuracy  66.7\n",
      "\t Epoch Loss  0.003241525497287512\n",
      "data_target torch.Size([3000])\n",
      "data_input torch.Size([3000, 1, 28, 50])\n",
      "data_target torch.Size([160])\n",
      "data_input torch.Size([160, 1, 28, 50])\n",
      "data_target torch.Size([1000])\n",
      "data_input torch.Size([1000, 1, 28, 50])\n",
      "Epoch Number :  49\n",
      "\t Training accuracy:  98.73333333333333\n",
      "\t Validation accuracy  53.75\n",
      "\t Test accuracy  66.8\n",
      "\t Epoch Loss  0.002873213728889823\n"
     ]
    }
   ],
   "source": [
    "import torch.optim as optim\n",
    "import math\n",
    "\n",
    "# Train network \n",
    "criterion = nn.BCELoss()\n",
    "#criterion = nn.CrossEntropyLoss()\n",
    "#criterion = nn.PoissonNLLLoss()\n",
    "#criterion = nn.BCEWithLogitsLoss()\n",
    "#criterion = nn.SmoothL1Loss() #interesting ... but does not converge\n",
    "#criterion = nn.MSELoss() #0.83 but unstable\n",
    "\n",
    "if isinstance(criterion, nn.CrossEntropyLoss):\n",
    "    train_target = Variable(labels_train)  # keep long tensors\n",
    "    validation_target = Variable(labels_validation, requires_grad=False) # convert to float\n",
    "    test_target = Variable(labels_test, requires_grad=False)\n",
    "    Noutputs = 2\n",
    "    \n",
    "elif isinstance(criterion, nn.NLLLoss):\n",
    "    train_target = Variable(labels_train)  # keep long tensors\n",
    "    validation_target = Variable(labels_validation, requires_grad=False) # convert to float\n",
    "    test_target = Variable(labels_test, requires_grad=False )\n",
    "    Noutputs = 2\n",
    "    \n",
    "else:\n",
    "    train_target = Variable(labels_train.float()) # convert to float\n",
    "    validation_target = Variable(labels_validation.float(), requires_grad=False) # convert to float\n",
    "    test_target = Variable(labels_test.float(), requires_grad=False)\n",
    "    Noutputs = 1\n",
    "\n",
    "batch_size = 15\n",
    "Nbatches = int(math.ceil(Ntrain/batch_size))\n",
    "Nepochs = 50\n",
    "seeds = list(range(14, 29))\n",
    "#seeds = [14,20,21,22,27,46,44,37,31,28]\n",
    "Nrep = len(seeds)\n",
    "\n",
    "train_errors = torch.Tensor(Nrep, Nepochs).zero_()\n",
    "test_errors = torch.Tensor(Nrep, Nepochs).zero_()\n",
    "validation_errors = torch.Tensor(Nrep, Nepochs).zero_()\n",
    "ep_loss = torch.Tensor(Nrep, Nepochs).zero_()\n",
    "\n",
    "for i_rep in range(Nrep):    \n",
    "    print('Repetition', seeds[i_rep])\n",
    "    torch.manual_seed(seeds[i_rep])\n",
    "    #model = conv2DNet_1(Noutputs) #from classic knowledge of image segmentation  \n",
    "    model = conv2DNet_2(Nchannels, Nsamples_100, Noutputs) #from litterature \n",
    "    #model = conv2DNet_3(Noutputs) #from PdM\n",
    "    #model = conv2DNet_4(Noutputs) #from PdM\n",
    "    #model = conv2DNet_5(Noutputs) #from PdM\n",
    "    #model = conv2DNet_6(Noutputs)\n",
    "    \n",
    "    #optimizer = optim.SGD(model.parameters(), lr=1e-3, momentum=0.50)\n",
    "    optimizer = optim.Adam(model.parameters())\n",
    "    #optimizer = optim.Adagrad(model.parameters())\n",
    "    #optimizer = optim.Adamax(model.parameters())\n",
    "    #optimizer = optim.ASGD(model.parameters())\n",
    "    #optimizer = optim.RMSprop(model.parameters())\n",
    "    #optimizer = optim.Rprop(model.parameters())\n",
    "    \n",
    "    scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, verbose=True)\n",
    "\n",
    "    for i_ep in range(Nepochs):\n",
    "        for b_start in range(0, Ntrain, batch_size):\n",
    "            bsize_eff = batch_size - max(0, b_start+batch_size-Ntrain)  # boundary case\n",
    "            model.train()\n",
    "            model.zero_grad()\n",
    "            output = model(train_input.narrow(0, b_start, bsize_eff))\n",
    "            batch_loss = criterion(output, train_target.narrow(0, b_start, bsize_eff))            \n",
    "            ep_loss[i_rep, i_ep] += batch_loss.data[0]\n",
    "            batch_loss.backward()\n",
    "            optimizer.step()\n",
    "        \n",
    "        scheduler.step(ep_loss[i_rep, i_ep])\n",
    "        \n",
    "        nb_train_errs = compute_nb_errors(model, train_input, train_target, batch_size)\n",
    "        nb_validation_errs = compute_nb_errors(model, validation_input, validation_target, batch_size)\n",
    "        nb_test_errs = compute_nb_errors(model, test_input, test_target, batch_size)\n",
    "        \n",
    "        print(\"Epoch Number : \", i_ep)\n",
    "        print(\"\\t Training accuracy: \", (100*(Ntrain-nb_train_errs)/Ntrain))\n",
    "        print(\"\\t Validation accuracy \",(100*(Nvalidation-nb_validation_errs)/Nvalidation)) \n",
    "        print(\"\\t Test accuracy \",(100*(Ntest-nb_test_errs)/Ntest))\n",
    "        \n",
    "        print(\"\\t Epoch Loss \", ep_loss[i_rep, i_ep])\n",
    "        \n",
    "        train_errors[i_rep, i_ep] = nb_train_errs\n",
    "        test_errors[i_rep, i_ep] = nb_test_errs\n",
    "        validation_errors[i_rep, i_ep] = nb_validation_errs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([15, 50])\n",
      "0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAD8CAYAAAB+UHOxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzt3Xl8XGd56PHfM7tkybJkyXYiKXEWZfGaxUAggaTZSMISbksg0IAvTXHTphAKfCCUtrlduIXSy05pQxJIWkoIYUkCgeAGSICQxU7wmsXGTmzZTix5kVeNZnnuH+ccaSTNPiPNeM7z/Xz00cyZozPvsWfe591fUVWMMcb4T6DWCTDGGFMbFgCMMcanLAAYY4xPWQAwxhifsgBgjDE+ZQHAGGN8ygKAMcb4lAUAY4zxKQsAxhjjU6FaJyCfzs5OnT9/fq2TYYwxx5TVq1cPqmpXofPqOgDMnz+fVatW1ToZxhhzTBGRl4o5z5qAjDHGpywAGGOMT1kAMMYYn7IAYIwxPmUBwBhjfMoCgDHG+JQFAGOM8am6ngfgF1sHD7Nj31Eu6Ous+FoPrNnJplcOViFVxhyb5rbF+OPXnFjrZBwTLADUgVsf/T0/f243T/z1pRVf6yPfXcNIMo1IFRJmzDHG2+L88gXz6GqN1jYxxwALAHXgyEiKIyOpiq+TSisjyTR/delp3HRpXxVSZsyx5d7V/Xz0u2sYTlT+ffID6wOoA8OJFPFkuuLrjLjXiIbtv9X4UzTkfPbjSQsAxbCcog7Ek2lGkmnUq7+WfR3nQ+99CYzxG++zP5yovEDlB5ZT1IG4+2GttBbg/X00FKw4TcYci6Jh57NfjRq1H1gAqANeyb3iAJDwAoD9txp/Gm0Csj6AohTMKUTkDhHZLSLrs7z2URFREel0n4uIfElENovIWhE5J+Pc5SKyyf1ZXt3bOLYNj9YAKvvQjjYBWR+A8amxPgCrARSjmJzim8AVEw+KSC9wGbAt4/CVQJ/7swL4mntuB3AL8Brg1cAtItJeScIbyWgNoMJ2y+GENQEZf4uNNgFZDaAYBQOAqj4K7M3y0ueBjwGZPZdXA3ep43FglogcB7wRWKmqe1V1H7CSLEHFr7zSStVqANYEZHzKagClKSunEJG3AjtUdc2El7qB7RnP+91juY4bxkrulY5cGOsEtgBg/Gm0E9hGARWl5IlgItIMfBK4PNvLWY5pnuPZrr8Cp/mIE044odTkHZOq1gnsXserBhvjNzYPoDTlFBVPAU4C1ojIi0AP8LSIzMMp2fdmnNsD7MxzfBJVvVVVl6nqsq6ugnsaN4SqNQElbCKY8TebB1CaknMKVV2nqnNUdb6qzsfJ3M9R1ZeB+4H3uqOBzgOGVHUX8BBwuYi0u52/l7vHfE9VR2fw2jwAYyrjffatBlCcYoaBfhv4LXC6iPSLyPV5Tn8Q2AJsBr4O/AWAqu4F/hF4yv35B/eY72Vm+pW2W1onsPG7cFAQsU7gYhXsA1DVdxV4fX7GYwVuzHHeHcAdJaav4WVm+pWPArJOYONvIkIsFLQAUCTLKWosM9Ov2kxg6wQ2PhYNB2wmcJEsANTYuCagCgOAtwSu1QCMn0VDAasBFMlyihrLXLe80lJLPJkmIBAK2G4wxr+ioaDtB1AkCwA1Vs0aQDyZIhoKIrYdmPExqwEUzwJAjY3rA6hCDSBmcwCMz0XDFgCKZblFjQ0nqlgDSKRtDoDxPWcUkDUBFcMCQI1VdRRQMmWzgI3vOaOArAZQDMstaqza8wBsBJDxu6jNAyia5RY1Vt2ZwNYEZIzTCWxNQMWwAFBj3nC1GZHKSy3OKCD7LzX+Fg0FbDG4IlluUWNepj+zKVxxqWU4kbY+AON7UesELprlFjXmfVBnxsJVmwdgjJ/ZMNDiWQCoMa+q2tYUrrwPIGGdwMbEwkEbBVQkyy1qLJ5MEQwIzdHKq63ORDCrARh/8zqBncWJTT4WAGrMK7VXY/q6dQIb4wSAtEIybQGgEMstaswrtVdjASubB2DM2K5gtiBcYZZb1NhwIlW9GkAibXsBGN/zRsJZR3BhFgBqzCu1VzpyQVWtCcgYxvbDsABQmOUWNeYN3YyFghWtBppMK2m1zWCM8QZC2K5ghRWzKfwdIrJbRNZnHPusiDwnImtF5AciMivjtU+IyGYReV5E3phx/Ar32GYRubn6t3JsGk44SzhXWgMY2w3MmoCMv1kNoHjFFBe/CVwx4dhKYJGqLgFeAD4BICILgGuBhe7f/JuIBEUkCHwVuBJYALzLPdf3vBpANBQkmVaSqfI+tKMbwttMYONzXiHIAkBhBXMLVX0U2Dvh2M9UNek+fRzocR9fDdytqnFV3QpsBl7t/mxW1S2qOgLc7Z7re/Gks3yDV2oZqTQAWBOQ8TnvO2CjgAqrRm7xJ8BP3MfdwPaM1/rdY7mOTyIiK0RklYisGhgYqELy6pu3ictotbXMGYxee6dNBDN+Z6OAildRABCRTwJJ4FveoSynaZ7jkw+q3qqqy1R1WVdXVyXJOyYMu5u4eMM3y/3QWg3AGMdoE5DVAAoKlfuHIrIceDNwiY7Nue4HejNO6wF2uo9zHfe1zJnAUP6mMGMBwGoAxt9iVgMoWlnFRRG5Avg48FZVPZLx0v3AtSISFZGTgD7gSeApoE9EThKRCE5H8f2VJb0xeJu4VNpxFR8dBWQ1AONv1glcvII1ABH5NnAR0Cki/cAtOKN+osBKEQF4XFVvUNUNInIPsBGnaehGVU251/lL4CEgCNyhqhum4H6OOfFEyhkGWmHHlY0CMsZRaW3aTwoGAFV9V5bDt+c5/1PAp7IcfxB4sKTU+cBoDaDCaqs1ARnjGOsDsBpAIVZcrKF0WhlJeX0AlX1ovdKONQEZv/MKU8NWAyjIcosa8sb8R8OBjI6r8j603sYyVgMwfhcJVjak2k8sANSQ194fq0YnsFcDsD4A43OBgBAJ2raQxbDcooYyO24rHgbqlnZiVgMwxl1by5qACrEAUEPxjGab0U7gsvsAbBSQMZ5oKGg1gCJYblFDXgnFGQZanSYgr/3TGD+LhgLWB1AEyy1qKLPjthozgSPBAIFAtlU3jPGXaDhgo4CKYAGghjKHbla+GJztB2yMJxoKWg2gCJZj1FDmAm6hYIBgQCpqArL2f2Mczh7bVgMoxHKMGhqesIRzJR9ab0axMcbpV7NO4MIsANTQxJE70VBgtF+gVMMJ2xDeGI+NAiqO5Rg1NNYHEBz9XVEnsAUAYwBvFJA1ARViOUYNjU7e8moAFVRb48m07QZmjCsaDjJiNYCCLADU0HBifA0gVsHIhbg1ARkzymlOtRpAIZZj1NDEbRwrmb7ubC5vNQBjwBtQYTWAQiwA1NCkAFDBh9YZBWT/ncaAdQIXy3KMGhpOpAgFhFDQCwDlf2jjSWsCMsYTs8XgimI5Rg1NLLVXNA8gYfMAjPFEQ0ESKSWV1lonpa4VDAAicoeI7BaR9RnHOkRkpYhscn+3u8dFRL4kIptFZK2InJPxN8vd8zeJyPKpuZ1jizN7dyzTjobLX8DK6QOweG4MjM2tsZFA+RWTY3wTuGLCsZuBh1W1D3jYfQ5wJdDn/qwAvgZOwMDZTP41wKuBW7yg4WfxRJrYuBpABU1ANgrImFHed8FGAuVXMMdQ1UeBvRMOXw3c6T6+E3hbxvG71PE4MEtEjgPeCKxU1b2qug9YyeSg4jvDE0bu2FIQxlRHpcur+0W5Rca5qroLwP09xz3eDWzPOK/fPZbruK9NLLWXuxRE5ubyxpixGoB1BOdX7Rwj22L0muf45AuIrBCRVSKyamBgoKqJqzeTOoHD5S0F4W0ubzOBjXF43wWrAeRXbgB4xW3awf292z3eD/RmnNcD7MxzfBJVvVVVl6nqsq6urjKTd2wYTqSyNAGlUS1t5MLY1pJWAzAGMmoAtidAXuXmGPcD3kie5cB9Gcff644GOg8YcpuIHgIuF5F2t/P3cveYr02sAcTCQVQhkSoxAHiLytkoIGOAse+CNQHlFyp0goh8G7gI6BSRfpzRPJ8G7hGR64FtwDXu6Q8CVwGbgSPA+wBUda+I/CPwlHveP6jqxI5l34kn03SGxtcAnOOpklb2HJtRbE1AxsDYd6Hc5dX9omAAUNV35XjpkiznKnBjjuvcAdxRUuoa3MRdvMYCQJrWEq+T+ffG+J11AhfHcowacuYBZNYAyuu4GrY+AGPGGWsCshpAPg2ZYxyKJ/nGb7ayceeBWiclr0k1AO9DW+LklbE+AGsCMgYYLVhZDSC/hgwAyVSav39gI7/dsqfWScnLWb8nexNQqdfJ/Htj/G6sMGU1gHwaMsdoawoTDgqDh+K1Tkpew8nUuLH75TYBTVxW2hi/s5nAxWnIHENEmD0jyuDB+g0AqbSSSGn2GkCZTUA2EcwYh3UCF6chAwBAZ2ukrmsAI1mGbnrV1mGrARhTkbHF4KwGkE/D5hidLVEGD43UOhk5ZRu6OVptLbUG4PUBWA3AGABCwQDBgFgNoIAGDwD1WwPwSiaxcLaJYKXWAGwegDETRUPl76/hFw2bY3S2RNlzaKTkdXWmS94agDUBGVOxWNj2BS6kYXOMzpYII6k0B44ma52UrEYz7Yx5ALEy1y+xpSCMmayS/TX8omEDQFdrFICBOm0G8qqmWWcCl1htjSdSiEA4mG3VbWP8yVtd1+TWsAGgs8UJAPXaDzCcZQXPcqevD7uriopYADDGEw0FbUvIAiwA1MjY7N2xGkAkWGYTUCJlzT/GTBANWw2gkAYOABGAup0Mlq0TOBAQIsHSP7TxZHq0/8AY47BRQIU1bK7R3hwhGJC6nQuQbRgolPehtQ3hjZksVuYWq37SsAEgEBA6ZtTvbOBcY/edamvpS0HYEFBjxrNO4MIaOteo58lg2YaBgtdxVfpqoLYdpDHjRUM2D6CQhs41OlsiDNRpE5C33EMslKUJqIx5ANYEZMx4Ng+gsIYOAF0t9bsi6HCOGkCkjGqrNQEZM1k0HLDF4AqoKNcQkb8SkQ0isl5Evi0iMRE5SUSeEJFNIvIdEYm450bd55vd1+dX4wby6Wx1moDqcTkIr6PXG/rpiZYxfT2eTFsAMGaCaChY8sKKflN2riEi3cAHgWWquggIAtcCnwE+r6p9wD7gevdPrgf2qeqpwOfd86ZUZ0uEeDLNoXj9LQcRT6YIBYTQhAAQCwVK/tAO2zwAYyaxTuDCKi02hoAmEQkBzcAu4GLgXvf1O4G3uY+vdp/jvn6JTPHU1bHJYPXXDzCcSGfdwKXsGoB1AhszjvddqscWgHpRdq6hqjuAfwW24WT8Q8BqYL+qekXufqDbfdwNbHf/NumeP3vidUVkhYisEpFVAwMD5SYPqO/ZwLna7csptcQT6Umdycb4nff9GklZLSCXSpqA2nFK9ScBxwMzgCuznOqF32yl/UmhWVVvVdVlqrqsq6ur3OQBGQGgDjuCc7XblzcKKGU1AGMmKHd/DT+pJNe4FNiqqgOqmgC+D7wOmOU2CQH0ADvdx/1AL4D7ehuwt4L3L6iz1V0Ooi5rAOmsO3g5HVfWCWxMpbzvly0Il1slucY24DwRaXbb8i8BNgK/AN7unrMcuM99fL/7HPf1n+sUN851NEcQoS7nAjgdt1lqAGUsYGXzAIyZbLQGYENBc6qkD+AJnM7cp4F17rVuBT4OfFhENuO08d/u/sntwGz3+IeBmytId1FCwQDtzfW5HETuGkBpTUDJVJpUWq0GYMwE1gRUWKjwKbmp6i3ALRMObwFeneXcYeCaSt6vHJ0tEfbUYwDIVQMosQko15ISxvidN8rOZgPn1vC5hrMeUB02ASVzDAMNBRhJpUmni2sds+0gjcnOagCF+SQAHEM1gHBpQ9e8Di5rAjJmvHK3WPWThs81Out0PaCRnMNAS/vQWhOQMdl534lhawLKqeFzjc7WCIdHUhwdqa8PQa6RO2PV1uLS651nE8GMGc9GARXW+AGgTmcDDydSWbdxHOu4KrIGkLAagDHZjNamrQaQU8PnGl1uABioswBQvRqAdQIbk41XwLJO4NwaPgDU63IQuZZv8AJAseuY59pa0hi/G6sBWADIpeFzjbHlIOpnKGgqrSRSmrXdPlpuE5DVAIwZxytg2Z4AuTV8AJg9o/76AEZL7XlqACU3AVkfgDHj2DyAwho+14iEArQ1hesrAIyW2vMFAGsCMqYS3m57VgPIzRe5RmdLfa0HlK/jdmweQHEf2mFrAjImKxGxXcEK8EkAiDJ4sH76ALzZu9mGgUZLHLlgNQBjcrMAkJ8vcg1vc/h6kb8GUNrkFe9a2dYVMsbvYuGgzQPIwxcBoKslWlfzAPKV2kudvOIFiojVAIyZJBoO2EzgPHyRa3S2RDg4nKybnYHyldrLaQIKB4VgINuOm8b4WzQUtCagPHwSAJyhoHsO10c/wOgKntmWgihx8ortBmZMbtFQoG4KfvXIVwGgXmYD5xsGGg4KIsWPAoonsy8rbYyxTuBCfJFzdLbW12SwfJ3ApQ5diydsQ3hjcnGagKwGkEtFOYeIzBKRe0XkORF5VkReKyIdIrJSRDa5v9vdc0VEviQim0VkrYicU51bKKyzxVsOoj4CQL5hoFBau2WuvYWNMc53zGoAuVVadPwi8FNVPQNYCjyLs9n7w6raBzzM2ObvVwJ97s8K4GsVvnfRxpaEro8+gEIreJayMbw1ARmTW6l7bPtN2TmHiMwE3gDcDqCqI6q6H7gauNM97U7gbe7jq4G71PE4MEtEjis75SWIhYO0RkMM1EsfQIHJW6UMXRu2JiBjcoqGiy9M+VElOcfJwADwDRF5RkRuE5EZwFxV3QXg/p7jnt8NbM/4+3732LSop8lghRZwi4aCRW9j5ywrbU1AxmTjjAKyGkAulQSAEHAO8DVVPRs4zFhzTzbZBqrrpJNEVojIKhFZNTAwUEHyxqun9YDGNnLP0wRUwkxgqwEYk511AudXSc7RD/Sr6hPu83txAsIrXtOO+3t3xvm9GX/fA+yceFFVvVVVl6nqsq6urgqSN15nS7Su+gDyTd4qfRSQ1QCMycaGgeZXdgBQ1ZeB7SJyunvoEmAjcD+w3D22HLjPfXw/8F53NNB5wJDXVDQdnABQHzWAQpl2KaWWXDuLGWO8PgALALmEKvz7DwDfEpEIsAV4H05QuUdErge2Ade45z4IXAVsBo64506bzpYo+48kSKTShIO1zTCHk9k3hPdEwwEOH04WdS1rAjImt1goSCqtJFNpQjX+3tejigKAqv4OWJblpUuynKvAjZW8XyW8rSH3HBphXlusVskAiqkBlNoHYE1AxmSTubaWBYDJfPMvMjYXoPbNQIXG7peyhG08YfMAjMnFNobPzzc5hxcA6mFZ6HgynXf55pI6gZNp6wMwJgevcGQLwmXnm5yjq44WhBtOpPJu4FLsUhCqak1AxuRR6vLqfuObAOD1AdTDUNBCHbdOH0DhEsvYvgK++W80piSlbrDkN77JOZojIZojwTrpA8i/gFuxQ9cKrSlkjN95hSNbDyi7hgwA+4b38fnVn2fD4IZxx+tlLkA8kSKWtwYQJOkOXct7HdsQ3pi8rBM4v0rnAdSlcCDMXRvvQlVZ2Llw9Hi9LAcxsQbwmx2/4dm9z/Kni/8UyNgYvsDQtWwby3z2qc+yef/mqUi2MceEzqZO/v51f08oEMr4LlkTUDYNGQBaIi0sm7uMX/b/kg8v+/Do8c6WKC/tOVLDlDkmDt28c8OdPPXyU7xnwXuIBqPjAsCMaJ7rjC4q5wSTwaOD3LXxLnpbe2mPtU/dDRhTpw6PHOaxnY9x7enXsrhr8WgNwBaEy64hAwDARb0X8eknP822A9s4YeYJgLMi6OqX9tU4ZeM7gdOaZv3gepKa5Pm9z7Oka8lohl6o1DKxCWjdwDoA/un8f+KcudO2344xdeOVw69w6b2XsnZwrRMAwlYDyKdhG4/f0PMGAB7pf2T0WGdLlL1HRgq2rU+1zGGgLw69yMHEQQDWD64HMpqACpRaxjqB3QAwuI6gBDlz9plTkm5j6t3cGXOZN2Mea3avAYr/LvlVwwaA3tZeTmk7hUe2jwWArpYIqrD3SG2HgmbWANYOrgUgFAixYY/TaV1sx9VYH0Bw9FqntZ9GU6hpStJtzLFgSeeS0e9VLGydwPk0bAAAuLD3Qla/spqDI04Je3Q5iIO1CwDJVJpkWscy7YG1tIZbee1xrx0dtVRsx5W3aUw0HCCVTrF+cD1LupZMYeqNqX9Lu5ay49AOBo8OWidwAQ0dAC7qvYikJvnNjt8ATh8A1HY9oImTt9YNrmNh50IWdy5my9AWDicOF11q8WoAsVCQrUNbOZw4zOLOxVOYemPqn1cIWjOwxoaBFtDQAWBJ5xJmRWeN9gPUw4Jwme32RxJH2LRvE0u6lrCwcyGKsnHPxrGOq4J9AGM1gHWDTgfw4i4LAMbfFsxeQDgQZs3AmtE1t6wPILuGDgDBQJDXd7+eX+34Fcl0ks4WbzmIWgYAL9MOsnHPRlKaYknnEhbOduYrbNyzsehqa2YwWTvoNCXNnzl/6hJvzDEgEoxwZseZrB1YSzAghINS9B7bftPQAQCcfoCh+BBrBtbQEnUmhtRyPaDMyVuZpfbZTbM5bsZxrB9cX3wncMZSEOsG1rGocxEBafj/UmMKWtK1hA2DG0ikE87iilYDyKrhc4vzjz+fkIR4pP8RRIQ5M6PsGhquWXq8kkgsHGTtwFp6WnroiHUAsKhzkRsAiqwBuAvGpSXOpv2brPnHGNfSrqUMp4bZtG+Tu7y61QCyafgA0BJp4dx5544OBz1j3kw27ByqWXoyawDeZBXPwtkL6T/UT1ydUUuFZi96NYAtQ8+R1jRLu5ZOUaqNObZ434U1A2vcDZasBpBNxQFARIIi8oyI/Mh9fpKIPCEim0TkO+5+wYhI1H2+2X19fqXvXayLei5iy9AWth/YzpLuNrYOHubgcGK63n4c74N4JLWX3Ud2j8u0vXWLXjzwvHNugSWhvWtt3Os0JS3qXFT19BpzLJo3Yx5dTV3uSCDbGD6XatQAbgKezXj+GeDzqtoH7AOud49fD+xT1VOBz7vnTYsLey4E4Jf9v2RRTxuqsGHngel6+3G8qmj/0ecAxg3bXDB7AQCbhp51zy08CigaCrB+cP24piRj/E5EWNq1lLUDa4kUub+GH1UUAESkB3gTcJv7XICLgXvdU+4E3uY+vtp9jvv6Je75U653Zi8nt53MI/2PsLi7DYD1O2rTDOQ162w79BzhQJgzOs4YfW1mZCbzZ87nhf0bgeLmAWRrSjLGOB3B2w9uJxQ5zLDVALKqtAbwBeBjgPevOxvYr6pJ93k/0O0+7ga2A7ivD7nnT4sLey9k9curiUZGOL4txtr+2gQArwbw+4MbOLPjTCLByLjXF8xewIY9GwgGpKjF4KLRg+w+spslnTYD2JhMXvNqKvyS1QByKDsAiMibgd2qujrzcJZTtYjXMq+7QkRWiciqgYGBcpM3yUU97qzgnb9hcU9bzWoATidwii1Dz2UttS/qXMTuI7uJRg8VngiWSBNo3g5gS0AYM8GC2QsISYiR0FbrA8ihkhrA+cBbReRF4G6cpp8vALNExFtmugfY6T7uB3oB3NfbgL0TL6qqt6rqMlVd1tXVVUHyxlvatZS2aBuPbn+Uxd1tbBk8zIEadAQPJ1MEoi8TT8ezltq9jtzIjJ3FzQOIbpvUlGSMgVgoxukdpzMc2GIBIIeyA4CqfkJVe1R1PnAt8HNV/WPgF8Db3dOWA/e5j+93n+O+/nNVnVQDmCqZs4IXdrcCsGHH9HcExxNpgk1OqT1bDeD09tMJSIBAbHtRTUCp8Euc0XHGpKYkY4xTMz7EVoaTtV0BuF5NxTyAjwMfFpHNOG38t7vHbwdmu8c/DNw8Be+d14W9F7I/vh+JvQTAuh37pzsJxJNOAJgVbaenpWfS683hZk6ZdQpEthcstQwnE4wEX7IF4IzJYWnXUtLEOao7C5/sQ1XZEUxVfwn80n28BXh1lnOGgWuq8X7l8mYFP7Tthxw/6xLW1aIGkEwRaNrGks7F5BoEtXD2Qn6/538YHslfAziQ7EdDIzYCyJgcvL6xeHBLjVNSnxp+JnCm1kgr1y24jh9t+RGR477N2v7d056GA/GDBKMDeTttF81eRDpwiIOp/Ok7yO8BbASQMTn0tPQQlTaS4RdrnZS61LB7Aufy4XM/TEesg8+t/hyplpd5cd/ZzG+fM23vvyvuzPLNGwDcjuD9qfylliOylRAt9Lb2Vi+BxjQQEaEr3Me26Iu1Tkpd8lUNAJwPxPsWvY/rT7uFQGwnf/Kz97B1aOu0vf/AyCZQybtsQ197H6JBDmn+dMWDLzJTTsnZlGSMgbnR0wlEBtl7dF+tk1J3fBcAPMuXvJUjL63g0MhhrnvwOla9vGpa3ndPYhOB5BxaI605z4kEIzTTy5HAiznPOTRyiFTwZTpCp05BKo1pHD3NzhDpZ15ZU+OU1B/fBoD2GRGObzqdRYG/YXbTbN6/8v38x5r/4NH+R9kytIV4qvqbxqgq+9O/J5I6qeC5MwMnMxLYRlqzjwRav2c9iNIV7qt2Mo1pKL3Np6Mq/G732lonpe74rg8g0+LuNjbuPMD9H/xPPvrIR/nK774y7vU5zXPoaenh9I7TuX7R9cydMbei9+s/2E+SQ7SkCweAWcGT2aU/56UDL3FS2+Tz1w04K4DOi1oAMCaflmgz6fg81g5aDWAifweAnjZ+sv5lSDVz62W3smd4D/0H+9l+cDv9h/rpP+j8fO+F73Hf5vu4YekNXHfmdYSD4bzXHYoP0RRqmjQ5a437AWzhlIJp6wyfAklYP7g+awBYO7iW9EgnrdGZJdyxMf4TDQVJHT2RZ/etJZVOEQwEa52kuuHvAOCtDLpziPNP7aSzyfk5a85Z487bfmA7//LUv/C51Z/jB5t/wCde/Qlee/xrx50zFB9i5Usr+fGWH7P6ldUEJMD8mfPpa+9zfmb18diOxxCNMDPYTSGzI71wOMKGPRt4yylvGfeaqrJuYB2pIyeObh9pjMkuGgqQOtrL0eTjfH3d1zlnzjkBwlN+AAAR9klEQVT0tffRHmuvddJqzgIAsLbfCQC59M7s5cuXfJlH+x/ln5/4Z1asXMFlJ17GB8/+IM/te44Htzw4uvH8/Jnz+bOlf0YqnWLT/k2sG1zHT1/86ei1Yqk+YqHCyzY0RyKk48ezYXADAEeTR9kwuIG1g2t5Zvcz7BneQ2r4gtHtI40x2UVDAVKH++iIdvHV33119HhnUyd9s5wCWnO4mUQqQSKdIJlOjv7O1QeX1CRHE0c5mjzKkeQR53fiCElN0h5tpyPWweym2cyOzaYj1kFHUwchmZzdKspIamTcNY4mnevOmzGPG5beMGX/LuDzADCrOUJvR1PRK4O+oecNvOa41/CN9d/gtnW3sfKllQB0NXXx7jPezVUnX8WCjgWThmUeThxm075NbN6/ma/9NEF0VuFMOxoKkDzazYY9T/KOB97BC/teIKXOzOATWk/gjSe+ie+9sNgCgDEFxMJBNDmT/3fedzlxTppN+zaxaf8mXtj3Apv2beLu5+5mJD1CKBAiHAiP+x2U7DXsgARoDjfTFGqiOdRMR6yDplAToUCI/fH97Dm6hy1DW9hzdA8j6eLXIQpIgKZQE02hpmmZ4OnrAACwpHsWa0tYEygajHLD0ht4yylv4cEtD7KkawnL5i7L2644IzyDs+acxVlzzuIr9/2CWLhws000HCR58Exaj3+W1kgrf7LoT1jatZTFXYvpiHXw8tAw9/70YaJFXMsYP/MKSSNJpau5i67mLl7X/brR19OaRpApmU+jqhxKHGLf8L7RAtyk9AWjo5l+NBid1nk9vg8Ai7rb+PG6Xew/MsKs5uJX1Oxu6eb9S95f8vvFk+miSu3RUIDUkVP50dX/Q2tscqezt1Ko1QCMyc8rJOVaXDEgU/cdEhFaI6155/3Uku9zjyU9Tj/AumnaICaeTBMNFxcAYGwLyYm849YJbEx+Y98l2xVsIt8HgEXHT3MASKSKyrS9c3LtCeAdjxURTIzxMy8A2KYwk/k+92hrDnPi7GbWTdMewcPJdFGZtldLyPWh9Y5bDcCY/MaagKwGMJHvAwA4/QDTUQNIptKk0lpkDcANADmagLzjxTQnGeNnMasB5GS5B7Cku43+fUfZd3hqt40bK7UX0wdQXBOQdQIbk99oDSBHYcrPLPdgbELYVNcCvE6oYkcBgTUBGVOpse+SNQFNZAEAWDhNAcDLtIubB1AoAFgNwJhihAJCQHKPqPOzsnMPEekVkV+IyLMiskFEbnKPd4jIShHZ5P5ud4+LiHxJRDaLyFoROadaN1GptqYw86ehI3i01F7UMFCv2pqjCcj6AIwpiogQDQWtBpBFJblHEviIqp4JnAfcKCILgJuBh1W1D3jYfQ5wJdDn/qwAvlbBe1fduSd28KtNA+zYf3TK3mOs1F64BhCzUUDGVE00HLBO4CzKDgCquktVn3YfHwSeBbqBq4E73dPuBN7mPr4auEsdjwOzROS4slNeZR+6tA8FPvH9dajqlLyHVwUtahhoKP/sxVL6E4zxu2goYJ3AWVQl9xCR+cDZwBPAXFXdBU6QALwd17uB7Rl/1u8eqwu9Hc18/IozePSFAe5d3T8l7xFPFF8DKNRxVcqIImP8Lha2JqBsKs49RKQF+B7wIVU9kO/ULMcmFbVFZIWIrBKRVQMDA5UmryTvOe9EXjW/nX/80UZ2Hxiu+vXLGQaaq+MqnkwRCgihoAUAYwqJhqwJKJuKcg8RCeNk/t9S1e+7h1/xmnbc37vd4/1Ab8af9wA7J15TVW9V1WWquqyrq6uS5JUsEBA+80dLiCfTfPKH66veFFRKu/3YKKDcncBW+jemOE4nsAWAiSoZBSTA7cCzqvq5jJfuB5a7j5cD92Ucf687Gug8YMhrKqonJ3e18JHLT2Plxlf40drqJs9rty+mDyASLDATOJm2paCNKVI0FLDF4LKopAh5PvAe4GIR+Z37cxXwaeAyEdkEXOY+B3gQ2AJsBr4O/EUF7z2lrr/gZJb2zuKW+zew51C8atctpQYQCAiRYO5qazyZshqAMUWyUUDZlb0fgKr+muzt+gCXZDlfgRvLfb/pFAwIn337Et70pV/xfx7YyJffdXZVrjs6DLTIsftOu2XuTmALAMYUJxoKMnQ0Uetk1B3LQXI4bW4rH7y4jwfW7OShDS9X5Zqjw0CLHLufr9Ti9AFYE5AxxYiFbRhoNhYA8rjholNYcNxM/uaH66vSFFR6DSCYpw8gZbOAjSmSdQJnZzlIHuFggH+9ZilDRxN85LtrSKcrGxXkZeaRIodu5msCGrZRQMYULd93yc8aMwc5NAB3XQ39qyq+1ILjZ/K3bzqTXz4/wG2/3lLRteLJNJFggECguE2fo+HcpZZ4MlXUonLGGG8UkNUAJmrMABAIwt6t8J33wKHdhc8v4LrzTuTKRfP4l58+z9Pb9pV9neFEac02+SavWCewMcWL2kzgrBozB2nugGu/BUf3wT3LIVVZ77+I8Ok/WsK8thgf+O9nGDpS3vWcTLv4Uruzfkm+UUBWAzCmGF5haqrW+TpWNWYAAJi3GN76Zdj2GDz0yYov19YU5ivvPodXDgzzse+tKeuDVOrY/Wg4yLDNAzCmYtFQAFVIpCwAZCp7HsAxYck1sPMZePyr0H0OLL22osud1TuLj19xBp968Fnu+u1LLH/d/JL+Pp7IsSH8/m2wfzvMP3/c4bw1gEQ6e3PSppUw+EJJ6TKmocw8Hha8DWSsry2WsTF8xApOoxo7AABc9g/w8lp44CboOgOOP6uiy11/wUn8dssePvXjZzn3xHYWubuJFcMptU9otokfgjvf6gSB638GPctGX4qGAozk7QOYcK2198D33190eoxpWFd+Fl6zYvRp5harrbVKUx1q/AAQDMHbvwG3XgjfuQ5WPAIzZpd9uUBA+NdrlnLVF3/FX/7309y2fBmnzinuI+Ws3zOh9PGzT8K+F2FGJ3x/BdzwK4jMAPKPXZ7UBLRjNdz3l3Di+fDO/3I6wo3xG1X4wZ/BQ38NPedC97lA4f01/KrxAwBASxe88z/hjivh3vfBdd93AkOZOmZE+PK7z+a9tz/JpZ97lAtP6+L6C07i9X2diOQe4jlpBc/nfwKrvwnn3wSnXgZ3vgV+9rfwZmdtPWcm8OQmIFUdPwrowC749ruhdS684y6nE9wYv3rb1+DfXw/f/d/wZ49CU/towcsWhBvPP41h3ec6GevWR+Ce98BAZe3kr5rfwa8//gd85LLT2LjrAO+940ne+IVHufvJbaMfsnRaGTgYZ13/EA9teJldB46Ojd0/NAD3fwDmLoI/+CSc9Hp47Y2w6nanHZ/cuxglUoqq00lM4ijc/W6IH4Rrv+3UJIzxs+YOuOabcGAn/PBGUB1rArK5AOP4owbgOfs6ODwAj3wW/u01sPgdcOHHYPYpZV1udkuUD1zSx4oLT+aBNbu4/ddbufn76/jMT5+jJRbilaE4I6nxH7hLz5zrVFMfuAmGh+C990Eo6rx4yd/B738B990If/7bnE1Aw96SEkGB+z8IO5+Gd34L5i0q6z6MaTi9r3L6/x76a3j834i2XwPk3l/Dr/wVAAAu+Cs46zp47Ivw5G2w7ruw9F3who9Cx0llXTIaCvL2c3v4o3O6+e2WPXznqe0IMK+tiePaYsxri3F8WxPz2mJ0tkTgmf+C538Ml/8TzF04dqFQFP7wVvj6H8ADHyTa8XeMpNKk0zpu9rBXijmn/y544R64+G/gzDdX8q9iTOM57y/gpcdg5d8x+/LTAOsDmMh/AQCcPoHL/wle+wH4zRfgqdth7d1OIDj/Q9B5almXFRFed0onrzslTzPM3q3w05th/uvhvCyrY89b5GToK/+OpWe8CuhjJJUmltGpG0+muCSwmrNf+CIs/EN4/UfLSq8xDU0Erv4K/McbOP1XN9HGLTy04WVU4Yx5rbTPiNQ6hTUn9TwzbtmyZbpqVeXr+RR0YBf8+nPw9F2QjDul6fM/NG5IZlWkU/CNq2D3Rvjzx2BWb+7z7nwLI/2/4+Ij/5f7PvkuJDnM8LbV6PYn0e1P0rHr14y0n8qsv/gfiDRXN53GNJIdq9Hb38hjupgvx6+imWGaiTOvKcWJM6FnhhLLURQWhGBACIizT0hQhID7nBwDPoIiBGT83wVEcp1OYPR8Z5Rh0PvbtuOIvWp59j8qQERWq2rBDMwCQKZDA/DEv8NTX3fa50+8AC74EJx6qfP6kT0w1O90Lh3Y4awzJAFnRFEw4vwEQhAMg6adJShSCUiNOL8Hn4f134P/dSssfWf+tOzfRuLL5/FiYhZHiLJAXiIsTvvli+m5rNbTmP+Oz3Du4oX5r2OMgSf+A37ysVqnoiTPh07n9L95sqy/tQBQifhBpzbw2686GX1zp3MsNXFPAAFK+fcTOOe98JYv5iw9ZBp68r+J/OzjDM7oY2/7Ug7POYfkcefS3D6PrtYoJ86eUcpdGeNfqrDjaUgcdubZhGc4NedIC+lgjJRknzeTSivJtJJIpkmk0iTcx8mcS8MriZSSSKdJpJRkKk0ypSRSaTRLXqGa8R6pNCNJ9+/Sadqbo7z57BPKut26DQAicgXwRSAI3Kaqn851bs0CgCc5Auvvha2PQsscmNntTDOf2e38zOhyMvJUAtIZJf1UwpmIFQg7tYFgxPltk7OMMdOg2AAwrZ3AIhIEvoqzWXw/8JSI3K+qG6czHUULReCsdzs/hc4jAliJ3Bhz7JjuiWCvBjar6hZVHQHuBq6e5jQYY4xh+gNAN7A943m/e8wYY8w0m+4AkK3nc1wnhIisEJFVIrJqYGBgmpJljDH+M90BoB/IHPzeA+zMPEFVb1XVZaq6rKura1oTZ4wxfjLdAeApoE9EThKRCHAtcP80p8EYYwzTPApIVZMi8pfAQzjDQO9Q1Q3TmQZjjDGOaV8LSFUfBB6c7vc1xhgznn/2AzDGGDNOXS8FISIDwEsVXKITGKxSco4ldt/+YvftL8Xc94mqWnAUTV0HgEqJyKpipkM3Grtvf7H79pdq3rc1ARljjE9ZADDGGJ9q9ABwa60TUCN23/5i9+0vVbvvhu4DMMYYk1uj1wCMMcbk0JABQESuEJHnRWSziNxc6/RMJRG5Q0R2i8j6jGMdIrJSRDa5v9trmcZqE5FeEfmFiDwrIhtE5Cb3eKPfd0xEnhSRNe59/717/CQRecK97++4y6w0HBEJisgzIvIj97lf7vtFEVknIr8TkVXusap81hsuAGRsOnMlsAB4l4gsqG2qptQ3gSsmHLsZeFhV+4CH3eeNJAl8RFXPBM4DbnT/jxv9vuPAxaq6FDgLuEJEzgM+A3zeve99wPU1TONUugl4NuO5X+4b4A9U9ayM4Z9V+aw3XADAZ5vOqOqjwN4Jh68G7nQf3wm8bVoTNcVUdZeqPu0+PoiTKXTT+PetqnrIfRp2fxS4GLjXPd5w9w0gIj3Am4Db3OeCD+47j6p81hsxANimMzBXVXeBk1kCc2qcnikjIvOBs4En8MF9u80gvwN2AyuB3wP7VTXpntKon/cvAB8D0u7z2fjjvsEJ8j8TkdUissI9VpXP+rQvBjcNCm46YxqDiLQA3wM+pKoHnEJhY1PVFHCWiMwCfgCcme206U3V1BKRNwO7VXW1iFzkHc5yakPdd4bzVXWniMwBVorIc9W6cCPWAApuOuMDr4jIcQDu7901Tk/ViUgYJ/P/lqp+3z3c8PftUdX9wC9x+kBmiYhXmGvEz/v5wFtF5EWcJt2LcWoEjX7fAKjqTvf3bpyg/2qq9FlvxABgm84497vcfbwcuK+Gaak6t/33duBZVf1cxkuNft9dbskfEWkCLsXp//gF8Hb3tIa7b1X9hKr2qOp8nO/zz1X1j2nw+wYQkRki0uo9Bi4H1lOlz3pDTgQTkatwSgjepjOfqnGSpoyIfBu4CGeFwFeAW4AfAvcAJwDbgGtUdWJH8TFLRC4AfgWsY6xN+K9x+gEa+b6X4HT4BXEKb/eo6j+IyMk4JeMO4BngOlWN1y6lU8dtAvqoqr7ZD/ft3uMP3Kch4L9V9VMiMpsqfNYbMgAYY4wprBGbgIwxxhTBAoAxxviUBQBjjPEpCwDGGONTFgCMMcanLAAYY4xPWQAwxhifsgBgjDE+9f8B8s74JnTyeDAAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(train_errors.shape)\n",
    "\n",
    "for i_rep in range(Nrep):\n",
    "    print(i_rep)\n",
    "    plt.plot(np.array(train_errors[i_rep, :]))\n",
    "    plt.plot(np.array(validation_errors[i_rep, :]))\n",
    "    plt.plot(np.array(test_errors[i_rep, :]))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i_rep in range(Nrep):\n",
    "    print(i_rep)\n",
    "    plt.plot(100*(Ntrain-np.array(train_errors[i_rep, :]))/Ntrain)\n",
    "    plt.plot(100*(Nvalidation-np.array(validation_errors[i_rep, :]))/Nvalidation)\n",
    "    plt.plot(100*(Ntest-np.array(test_errors[i_rep, :]))/Ntest)\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50,)\n",
      "Training accuracy 98.3%+-0.7834833264350891\n",
      "Validation accuracy 69.2%+-9.024465560913086\n",
      "Testing accuracy 69.5%+-4.1207122802734375\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_accuracy = 100*(Ntrain-np.array(train_errors))/Ntrain\n",
    "val_accuracy = 100*(Nvalidation-np.array(validation_errors))/Nvalidation\n",
    "test_accuracy = 100*(Ntest-np.array(test_errors))/Ntest\n",
    "\n",
    "stddev_train_errors = np.std(train_accuracy, axis=0)\n",
    "stddev_val_errors = np.std(val_accuracy, axis=0)\n",
    "stddev_test_errors = np.std(test_accuracy, axis=0)\n",
    "\n",
    "mean_train_errors = np.mean(train_accuracy, axis=0)\n",
    "mean_val_errors = np.mean(val_accuracy, axis=0)\n",
    "mean_test_errors = np.mean(test_accuracy, axis=0)\n",
    "\n",
    "epoch = list(range(50))\n",
    "print(stddev_train_errors.shape)\n",
    "\n",
    "#plt.errorbar(epoch, mean_train_errors, stddev_train_errors)\n",
    "#plt.errorbar(epoch, mean_val_errors, stddev_val_errors)\n",
    "#plt.errorbar(epoch, mean_test_errors, stddev_test_errors)\n",
    "\n",
    "plt.plot(epoch, mean_train_errors)\n",
    "plt.plot(epoch, mean_val_errors)\n",
    "plt.plot(epoch, mean_test_errors)\n",
    "plt.fill_between(epoch, mean_train_errors+stddev_train_errors, mean_train_errors-stddev_train_errors, alpha=0.5)\n",
    "plt.fill_between(epoch, mean_val_errors+stddev_val_errors, mean_val_errors-stddev_val_errors, alpha=0.5)\n",
    "plt.fill_between(epoch, mean_test_errors+stddev_test_errors, mean_test_errors-stddev_test_errors, alpha=0.5)\n",
    "plt.xlabel('Number of epochs')\n",
    "plt.ylabel('Accuracy in %')\n",
    "plt.legend(['train', 'validation', 'test'])\n",
    "\n",
    "print(\"Training accuracy {:4.3g}%+-{}\".format(mean_train_errors[-1], stddev_train_errors[-1]))\n",
    "print(\"Validation accuracy {:4.3g}%+-{}\".format(mean_val_errors[-1], stddev_val_errors[-1]))\n",
    "print(\"Testing accuracy {:4.3g}%+-{}\".format(mean_test_errors[-1], stddev_test_errors[-1]))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
